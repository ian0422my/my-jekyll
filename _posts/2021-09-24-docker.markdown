---
layout: single
#classes: wide
title:  "Docker"
date:   2021-09-24 10:31:50 +0800
categories: docker
toc: true
toc_label: "In this page"
toc_icon: " "
toc_sticky: true
sidebar:
  nav: "about"
---

## Introduction

* written using Golang
* use [Visual Studio Code](./2021-09-22-visual-studio-code.markdown) (with docker plugin) to build docker image easily
* run your application in a lightweight vm (e.g. ubuntu)
  * light footprint
  * quick instantiation
* meant to ephemereal
  * run and destoy; repeat
* need to run on virtualization (hyper-v or virtualbox)
  * docker desktop requires
    * [hyper-v and containers (windows features) to be enabled](https://docs.docker.com/desktop/windows/install/#hyper-v-backend-and-windows-containers)
    * [wsl and containers](https://docs.docker.com/desktop/windows/wsl/)
* configuration file
  * [Dockerfile](#Dockerfile)
    * yaml
      * allow you to create custom image based on existing base image <https://thenewstack.io/docker-basics-how-to-use-dockerfiles/>
      * good if you want to use image multiple times with configuration steps. E.g. web, app, db all can be build from the same image (with slight difference)
  * docker-compose.yaml
    * list of docker commands to setup and run multiple containers at the same time; 
    * all containers is able to look at each other (localhost)
    * commands
      * docker-compose up # bring up containers
      * docker-compose down # bring down conainer but preserve volumn
      * docker-compose down --volume # bring down container and remove volume
    * sammple
      * wordpress, mysql
        * <https://docs.docker.com/samples/wordpress/>
* VS
  * start just stasrt a stopped existsing container
  * run start both new and existing container

## Glossary

* <https://docs.docker.com/glossary/>

| Name           | Description                                              |
| :------------- | :------------------------------------------------------- |
| client         | interface to talk to dockerd through rest api            |
| dockerd        | docker daemon; manages docker such as images, containers |
| image          | read only template of a docker container                 |
| container      | running instance of a docker image                       |
| registry       | place where you store docker images                      |
| docker compose | yaml; run multiple cotntiners using 1 command            |
| docker engine  | grouping; consists of docker client and docker daemon    |

## Command

| command                                                     | Description                                                                                                         |
| :---------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------ |
| docker ps                                                   |                                                                                                                     |
| docker inspect                                              |                                                                                                                     |
| docker container inspect followed by docker image inspect   |
| docker exec -it <cid> /bin/bash                             | login                                                                                                               |
| docker image ls                                             | list all the images                                                                                                 |
| docker images                                               |                                                                                                                     |
| docker image build -t mydockerimage .                       | build docker image                                                                                                  |
| docker images                                               | list iamge                                                                                                          |
| docker image rm -f <imageid>                                | remove docker image from repository                                                                                 |
| docker image inspect \| grep Version                        | get image version                                                                                                   |
| docker container ls                                         | list all running container. same as "docker ps"                                                                     |
| docker network ls                                           | list of network                                                                                                     |
| docker container run -d --name <n> --network <nw> -it <cid> | create and run interactively                                                                                        |
| docker container start -ai <cid> bash                       | start existing interactively                                                                                        |
| docker container rm -f cid                                  | remove forcefuly - running or not                                                                                   |
| docker container start [--env <cid>]                        | allow environment variables to be passed to the application                                                         |
| docker container top <cid>                                  | check status                                                                                                        |
| docker container status <cid>                               | check running status                                                                                                |
| docker container inspect <cid>                              | check running status                                                                                                |
| docker container port <cid>                                 | show port mappin                                                                                                    |
| docker logs -f <cid>                                        | tail logs                                                                                                           |
| docker network create <nid>                                 | create network                                                                                                      |
| docker run -d -p 7080:80 --name <dockername> <dockerimage>  | -d: run as daemon<br/> -p ort mapping from host(7080) to guest/container(80)<br/> format: ip:hostPort:containerPort | ip::containerPort | hostPort: containerPost | containerPort<br/> -rm: cleanup(do not persist container's file system) |
| dockerimage                                                 |                                                                                                                     |
| docker restart <cid>                                        |
| docker rm <cid>                                             |
| docker container prune                                      | remove all exited contatin                                                                                          |
| docker build ian0422my/catnip .                             | build dockerimage from current folder (need Dockerfile)                                                             |
| docker login                                                | login to docker                                                                                                     |
| docker push ian0422my/catnip                                | push docker image to docker hub                                                                                     |
| docker cp <cid>:<container path> <local path>               | copy file from container to host                                                                                    |
| docker compose up                                           | run docker using docker-compose.yml                                                                                 |

### Docker Compose

* tool for defining and running multi-container Docker applications
* containers will joined the same network (can see each other by service.name. E.g. db:3306, wordpress:80 )
* create docker-compose.yaml below (Wordpress:80 -> MySQL:3306)

```yaml
version: "3.9"
    
services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    volumes:
      - wordpress_data:/var/www/html
    ports:
      - "8000:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
volumes:
  db_data: {}
  wordpress_data: {}
```

* bring up containers

```ssh
docker-compose up [-d] [--remove-orphans]
```

* bring down conainer but preserve volume

```ssh
docker-compose down [--volume]
```

#### Command

<https://docs.docker.com/compose/reference/run/>

### Dockerfile

* Reference
  * <https://thenewstack.io/docker-basics-how-to-use-dockerfiles/>
  * <https://www.sitepoint.com/how-to-build-an-image-with-the-dockerfile/>
* to build dokcer image
* create Dockerfile below

```yaml
ARG username # build argument (can password from cli -buildargs key=value)
ARG useremail=ianlow@ncs.com.sg

RUN echo "my email is $useremail"

FROM ubuntu:latest # image

ENV GRAPHVIZ_DOT=/usr/bin/dot # container envinronment variables

MAINTAINER NAME EMAIL

# COPY pom.xml /app/ # copy file from  host to container
# COPY src /app/src/ # copy folder from  host to container 

RUN echo "hi. user $username" # run command in container
# apt-get update && \
#    apt-get install -y --no-install-recommends graphviz fonts-noto-cjk && \
#    rm -rf /var/lib/apt/lists/*   # run chain command
RUN apt-get -y update
RUN apt-get -y upgrade
RUN apt-get install -y build-essential

ADD .bashrc /root/.bashrc # copy file from host to container
ADD app /app # copy folder frmo host to container

ENV PYTHONIOENCODING UTF-8 # set environment variables

# Where NAME is your full name and EMAIL is your email address.
```

* build image

```ssh
docker image build -t <tag> . --build-arg username=ianlow [-f custom.dockerfile]# with build arg
```

* run

```ssh
docker run
```

* login to docker hub

```ssh
docker login
```

* push image to docker hub

```ssh
docker push
```

## Toubleshotting

### container cannot access internet

<https://stackoverflow.com/questions/59766135/not-able-to-access-internet-inside-docker-windows-container>

* add ["dns":"202.166.1.56"] to docker engine json and restart docker
* or add --dns 202.166.1.56 to start up command
