---
layout: single
title:  "JWS"
date:   2021-08-30 12:07:50 +0800
toc: true
toc_label: "In this page"
toc_icon: ""
toc_sticky: true
sidebar:
  nav: "about"
---
## Legend

* MOP: member of public
* BR: browser
* SPOP: Singpass OP (browser)
* RP: CSHL
* client assertion (RP -> SPOP)
  * client-jwks-sig-pri: use by RP to ***sign***  clientAssertion JWT (to become JWS)
  * client-jwks-sig-pub: used by SPOP to ***validate clientAssertion signature***
* sp token endpoint jwe/jws (SPOP -> RP)
  * sp-jwks-sig-pri: use by SPOP to ***sign*** token endpoint JWT(to become JWS)
  * client-jwks-enc-pub: use by SPOP to ***encrypt*** JWE (token endpoint)
  * sp-jwks-sig-pub: use by RP to ***validate JWS signature*** for token endpoint
  * client-jwks-enc-pri: use by RP to ***decrypt***  JWE (token endpoint)

## OpenID Discovery Endpoint

### Sequence Diagram

{% plantuml %}
SingPassOIDCOpenIDDiscoveryScheduler -> SingPassOIDCOpenIDDiscoverySchedulerConfiguration: get scheduler expression
SingPassOIDCOpenIDDiscoverySchedulerConfiguration -> SingPassOIDCOpenIDDiscoveryScheduler: scheduler expression (e.g. 0 0 2 * * *, or every day 2am)
SingPassOIDCOpenIDDiscoveryScheduler -> SingPassOIDCOpenIDDiscoveryScheduler: create job using scheduler expression
SingPassOIDCOpenIDDiscoveryScheduler -> SingpassOIDCService: retrieveSingPassOpenIDDiscoveryInfo
SingpassOIDCService -> SPOP: retrieve singpass openid discovery info
SPOP -> SingpassOIDCService: singpass openid discovery info
SingpassOIDCService -> CommonGuavaCacheUtil: cache for 1 day
{% endplantuml %}

## Client JWKS Endpoint

* Purpose
  * for RP to expose public key for SP
    * client-jwks-sig-pub: used by SPOP to ***validate clientAssertion signature***
    * client-jwks-enc-pub: use by SPOP to ***encrypt*** JWE (token endpoint)

### Keystore

* run command below to generate keystore for local/development

```cmd
keytool -genkeypair -alias oidc.hc-dev.careshieldlife.gov.sg -keyalg EC -keysize 256 -sigalg SHA256withECDSA  -validity 730 -storetype JKS -keystore oidc.hc-dev-careshieldlife.jks -storepass 3cG@yPXp 

What is your first and last name?
  [Unknown]:  oidc.hc-dev.careshieldlife.gov.sg
What is the name of your organizational unit?
  [Unknown]:  HCD
What is the name of your organization?
  [Unknown]:  CPFB
What is the name of your City or Locality?
  [Unknown]:  Singapore
What is the name of your State or Province?
  [Unknown]:  Singapore
What is the two-letter country code for this unit?
  [Unknown]:  SG
Is CN=oidc.hc-dev.careshieldlife.gov.sg, OU=HCD, O=CPFB, L=Singapore, ST=Singapore, C=SG correct?
  [no]:  yes
```

### Algorithm

|keyalg|keysize|default sigalg|
|DSA|any size|SHA256withDSA|
|RSA|<= 3072|SHA256withRSA|
||<= 7680|SHA384withRSA|
||> 7680|SHA512withRSA|
|EC|< 384|SHA256withECDSA|
||< 512|SHA384withECDSA|
||= 512|SHA512withECDSA|
|RSASSA-PSS|<= 3072|RSASSA-PSS (with SHA-256)|
||<= 7680|RSASSA-PSS (with SHA-384)
||> 7680|RSASSA-PSS (with SHA-512)|
|EdDSA|255|Ed25519|
||448|Ed448|
|Ed25519|255|Ed25519|
|Ed448|448|Ed448|

#### Reference

<https://docs.oracle.com/en/java/javase/16/docs/specs/man/keytool.html>

### Sequence Diagram

{% plantuml %}
SPOP -> ClientJWKSEndpointServlet: request for jwks public key(sig, enc)
ClientJWKSEndpointServlet -> ClientJWKSEndpointServlet: extract "sig"(client-jwks-sig-pub) public key from private key(client-jwks-sig-pri)
ClientJWKSEndpointServlet -> ClientJWKSEndpointServlet: extract "enc"(client-jwks-enc-pub) public key from private key(client-jwks-enc-pri)
ClientJWKSEndpointServlet -> ClientJWKSEndpointServlet: construct jwks for "enc" and "sig"(client-jwks-enc-pub, client-jwks-sig-pub)
ClientJWKSEndpointServlet -> SPOP: return jwks public key(client-jwks-enc-pub, client-jwks-sig-pub)
SPOP -> SPOP: cache jwks for 1 day
{% endplantuml %}

## SingPass JWKS Endpoint

* Purpose
  * for SPOP to expose public key to RP
    * sp-jwks-sig-pub: use by RP to ***validate JWS signature*** for token endpoint
* NDI signs all JWTs issued during the authentication process using its ASP signing key. Integrating parties can validate the JWT signatures by acquiring the signing public key from a JSON Web Key Set (JWKS) endpoint.

### Sequence Diagram

{% plantuml %}
SingPassOIDCJWKSScheduler -> SingPassOIDCJWKSSchedulerConfiguration: get scheduler expression
SingPassOIDCJWKSSchedulerConfiguration -> SingPassOIDCJWKSScheduler: scheduler expression (e.g. 0 0 2 * * *, or every day 2am)
SingPassOIDCJWKSScheduler -> SingPassOIDCJWKSScheduler: create job using scheduler expression
SingPassOIDCJWKSScheduler -> SingpassOIDCService: retrieveSingPassJWKSInfo
SingpassOIDCService -> SPOP: retrieveSingPassJWKSInfo
SPOP -> SingpassOIDCService: JWKS (sp-jwks-sig-pub)
SingpassOIDCService -> CommonGuavaCacheUtil: cache for 1 day
{% endplantuml %}

## Authentication

### Sequence Diagram

{% plantuml %}
MOP -> BR:click login button
BR -> PortalLoginServlet: construct singpass authentication endpoint
PortalLoginServlet -> SingpassOIDCService: construct singpass authentication endpoint
SingpassOIDCService -> PortalLoginServlet: return singpass login url
PortalLoginServlet -> BR: instruct browser to redirect to singpass op
BR -> SPOP: redirect to singpass op
SPOP -> SPOP: login
SPOP -> SingPassAuthServlet: response(state,code)
SingPassAuthServlet -> SingpassOIDCService: getIdToken
SingpassOIDCService -> SingpassOIDCService: validateAuthenticationEndpointRequest
SingpassOIDCService -> SingpassOIDCService: generateClientAssertion
SingpassOIDCService -> CryptoUtil: get Client JWKS "sig" private key(client-jwks-sig-pri)
CryptoUtil -> SingpassOIDCService: client-jwks-sig-pri
SingpassOIDCService -> SingpassOIDCService: sign jwt (client-jwks-sig-pri) and get clientAssertion(in JWS form)
SingpassOIDCService -> SingpassOIDCService: get token endpoint json(clientAssertion, code)
SingpassOIDCService -> SPOP: get token endpoint json(clientAssertion, code)
SPOP -> SPOP: verify clientAssertion(JWS) signature using client jwks endpoint "sig" public key(client-jwks-sig-pub)
SPOP -> SPOP: construct jwe (encrypt using client-jwks-enc-pub)
SPOP -> SingpassOIDCService: return with token endpoint json
SingpassOIDCService -> SingpassOIDCService: validate response from token endpoint
SingpassOIDCService -> SingpassOIDCService: decrypt jwe using client jwk endpoint "enc" private key(client-jwks-enc-pri)
SingpassOIDCService -> SingpassOIDCService: extract JWS from payload
SingpassOIDCService -> SingpassOIDCService: verify token signature(using SingPass JWKS Endpoint "sig" public key)
SingpassOIDCService -> CommonGuavaCacheUtil: request for SingPass JWKS(sp-jwks-sig-pub)
CommonGuavaCacheUtil -> SingpassOIDCService: sp-jwks-sig-pub
SingpassOIDCService -> SingpassOIDCService: validate JWS signature (using sp-jwks-sig-pub)
SingpassOIDCService -> SingpassOIDCService: validate JWS structure
SingpassOIDCService -> SingpassOIDCService: extract "sub"(subject) from payload
SingpassOIDCService -> SingPassAuthServlet: login
SingPassAuthServlet -> BR: instruct browser to show landing page with login id
BR -> MOP: show landing page
{% endplantuml %}

# TODO

* client-jwks-enc-pri: should be generated by infra or apps? using what algorithm?
* client-jwks-sig-pri: should be generated by infra or apps? using what algorithm?
* openiddiscovery endpoint scheduler: is scheduler ok?
* singpass jwks endpoint scheduler: is scheduler ok?
