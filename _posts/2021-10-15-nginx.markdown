---
layout: single
#classes: wide
title:  "Nginx"
date:   2021-10-15 18:00:50 +0800
categories: nginx
allow_different_nesting: true
toc: true
toc_label: "In this page"
toc_icon: " "
toc_sticky: true
sidebar:
  nav: "about"
---

## docker

<https://www.digitalocean.com/community/tutorials/how-to-run-nginx-in-a-docker-container-on-ubuntu-14-04>

* mkdir -p  ~/docker-nginx/html
* cd  ~/docker-nginx/html
* touch index.html (edit as you might)
* sudo docker run --name docker-nginx -p 80:80 -d -v ~/docker-nginx/html:/usr/share/nginx/html nginx
* cd ~/docker-nginx
* sudo docker cp docker-nginx:/etc/nginx/conf.d/default.conf default.conf
* edit default.conf (appropriately)
* docker stop docker-nginx
* docker rm docker-nginx
* sudo docker run --name docker-nginx -p 80:80 -v ~/docker-nginx/html:/usr/share/nginx/html -v ~/docker-nginx/default.conf:/etc/nginx/conf.d/default.conf -d nginx

### Default Configuration (Full)

<https://www.nginx.com/resources/wiki/start/topics/examples/full/>

#### Virtual Host/Proxy

* nginx.conf

```txt
server {
        listen  80;
        server_name     gdc2.tyk.dashboard.sde;
        access_log      /var/log/nginx/gdc2.tyk.dashboard.sde.log       main;
        location / {
                proxy_pass      http://192.168.152.55:13000;
        }
}
```

```txt
server {
        listen  80;
        server_name     gdc2.tyk.gateway.sde;
        access_log      /var/log/nginx/gdc2.tyk.gateway.sde.log main;
        location / {
                proxy_pass      http://192.168.152.55:18080;
        }
}
```

### Self Signed Certificate Docker

<https://www.johnmackenzie.co.uk/posts/using-self-signed-ssl-certificates-with-docker-and-nginx/>

* create self signed certificate

```ssh
openssl req -newkey rsa:2048 -nodes -keyout nginx.key -x509 -days 365 -out nginx.crt
Generating a RSA private key
........................................................................................+++++
.......+++++
writing new private key to 'nginx.private.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:SG
State or Province Name (full name) [Some-State]:SG
Locality Name (eg, city) []:SG
Organization Name (eg, company) [Internet Widgits Pty Ltd]:SG
Organizational Unit Name (eg, section) []:SG
Common Name (e.g. server FQDN or YOUR name) []:SG
Email Address []:test@test.com
```

* create docker-compose.yml with content below

```yaml
version: '2'
services:
  nginx:
    image: nginx:1.15
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/nginx.crt:/etc/nginx/nginx.crt
      - ./nginx/nginx.key:/etc/nginx/nginx.key
    ports:
    - "8080:80"
    - "9443:9443"
  sonarqube1:
    image: sonarqube:latest
    ports:
    - "19000:9000"

networks:
  default:
    external: true
    name: keycloak_default
```

* create nginx.conf with content below

```txt
events {
  worker_connections  4096;  ## Default: 1024
}

http {
    server { # This new server will watch for traffic on 443
        listen              9443 ssl;
        server_name         sonarqube1;
        ssl_certificate     /etc/nginx/nginx.crt;
        ssl_certificate_key /etc/nginx/nginx.key;
        location / {
            proxy_pass      http://172.19.0.5:9000; # can only use ip; get this ip by inspecting docker network
        }
    }
}
```

* docker-compose up -d

### letsencrypt

<https://pentacent.medium.com/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71>

* mkdir directory `/srv/nginx/data/nginx`
* cd /srv/nginx

#### app.conf

* create /srv/nginx/data/nginx/app.conf with content below

```conf
server {
    listen 80;
    server_name www.ian0422my.xyz;
    location / {
        return 301 https://$host$request_uri;
    }    
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}
server {
    listen 443 ssl;
    server_name www.ian0422my.xyz;
    ssl_certificate /etc/letsencrypt/live/www.ian0422my.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.ian0422my.xyz/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://www.ian0422my.xyz; #for demo purposes
    }
}
```


#### docker-compose.yml

* create /srv/nginx/docker-compose.yml with content below

```txt
version: '3'
services:
  nginx:
    image: nginx:1.15-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
```

#### init-script.sh

* create `/srv/nginx/init-script.sh` with content below

```sh
#!/bin/bash

if ! [ -x "$(command -v docker-compose)" ]; then
  echo 'Error: docker-compose is not installed.' >&2
  exit 1
fi

domains=(www.ian0422my.xyz)
rsa_key_size=4096
data_path="./data/certbot"
email="" # Adding a valid address is strongly recommended
staging=0 # Set to 1 if you're testing your setup to avoid hitting request limits

if [ -d "$data_path" ]; then
  read -p "Existing data found for $domains. Continue and replace existing certificate? (y/N) " decision
  if [ "$decision" != "Y" ] && [ "$decision" != "y" ]; then
    exit
  fi
fi


if [ ! -e "$data_path/conf/options-ssl-nginx.conf" ] || [ ! -e "$data_path/conf/ssl-dhparams.pem" ]; then
  echo "### Downloading recommended TLS parameters ..."
  sudo mkdir -p "$data_path/conf"
  sudo curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf > ~/options-ssl-nginx.conf
  sudo curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem > ~/ssl-dhparams.pem

  sudo mv ~/options-ssl-nginx.conf "$data_path/conf/options-ssl-nginx.conf"
  sudo mv ~/ssl-dhparams.pem "$data_path/conf/ssl-dhparams.pem"

  echo
fi

echo "### Creating dummy certificate for $domains ..."
path="/etc/letsencrypt/live/$domains"
sudo mkdir -p "$data_path/conf/live/$domains"
docker-compose run --rm --entrypoint "\
  openssl req -x509 -nodes -newkey rsa:$rsa_key_size -days 1\
    -keyout '$path/privkey.pem' \
    -out '$path/fullchain.pem' \
    -subj '/CN=localhost'" certbot
echo


echo "### Starting nginx ..."
docker-compose up --force-recreate -d nginx
echo

echo "### Deleting dummy certificate for $domains ..."
docker-compose run --rm --entrypoint "\
  rm -Rf /etc/letsencrypt/live/$domains && \
  rm -Rf /etc/letsencrypt/archive/$domains && \
  rm -Rf /etc/letsencrypt/renewal/$domains.conf" certbot
echo


echo "### Requesting Let's Encrypt certificate for $domains ..."
#Join $domains to -d args
domain_args=""
for domain in "${domains[@]}"; do
  domain_args="$domain_args -d $domain"
done

# Select appropriate email arg
case "$email" in
  "") email_arg="--register-unsafely-without-email" ;;
  *) email_arg="--email $email" ;;
esac

# Enable staging mode if needed
if [ $staging != "0" ]; then staging_arg="--staging"; fi

docker-compose run --rm --entrypoint "\
  certbot certonly --webroot -w /var/www/certbot \
    $staging_arg \
    $email_arg \
    $domain_args \
    --rsa-key-size $rsa_key_size \
    --agree-tos \
    --force-renewal" certbot
echo

echo "### Reloading nginx ..."
docker-compose exec nginx nginx -s reload

```

* execute the script

```sh
/srv/nginx/init-script.sh
```
