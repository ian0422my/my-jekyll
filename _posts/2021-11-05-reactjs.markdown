---
layout: single
#classes: wide
title:  "React"
date:   2021-11-15 10:00:50 +0800
categories: nginx
allow_different_nesting: true
toc: true
toc_label: "In this page"
toc_icon: " "
toc_sticky: true
sidebar:
  nav: "about"
---

## Introduction

* front-end (need backend to get data)
* library (not framework like angular)
* create by facebook

## Archtecture Design

* react will create virtual dom(based on code) and render as actual dom (html display on page)
* refresh automatically once code change is saved
  * hot module refresh -> that's why its call "React"
* object oriented
  * method
    * each method is object
* construct by component(reusable) - nav bar, login, menu, etc
  * need to export (E.g. export default Counter) to import
* content is written using
  * javascript
    * templating engine
      * loop
      * if/else
  * JSX (javascript xml) - {}, {{}}
    * where jsx expression (E.g. \<span className="basic">) will be converted into javascript object
      * hence, "\<span className="basic"> cannot be written as \<span class="basic"> since "class" is a reserved keyword in javascript
    * not templating engine
      * no looping concept
      * no if/else
* Internal
  * babel
    * compile JSX into javascript
      * code > virtuadom > dom
  * create-react-app  
    * zero-config
  * ES6
    * new line
      * const
      * let

## Javascript Syntax

* like normal javascript
* method can return JSX
* class
  * extends Components
    * setState(state)
      * call this method to refresh the view
  * comprises of
    * state
      * each object has a state
        * initialize 1 time by object's state (i.e. state = {})
          * "state = {}" is just for initialization. this.state is referring to the state inside the object, not "state = {}".
      * will be overwritten after setState({})
    * render (method)
      * return jsx component
        * \<button className={}>, Or
        * text (E.g. "text")

## JSX Syntax

* javascript object
  * can be use like any other javascript like "let state = [like: \<Like/>]"

### {}

* javascript expression
* E.g.
  * {2+2}
    * you get 4
  * {this.state.count}
    * will display you declare in component's state.count
  * {this.formatCount()}
    * call a function (e.g. formatCount() { return 'hi';}) and display value returned by the function
  * \<button onClick={() => this.handleFunction(param1, param2))}>Click</button>
    * passing a reference of a function(with parameter) to event
    * function will not be called until event is triggered
  * \<button onClick={this.handleFunction)}>Click</button>
    * passing a reference of a function(with no parameter) to event
    * function will not be called until event is triggered
  * {{}}
    * use as it is? native value?
  * \<Counter handleIncrement={this.handleIncrement}/>
    * passing control frmo parent to child via Counter.props

### Attributes

* jsx attribute is different from dom attributes
* E.g.
  * id
  * style
    * variable
      * styles1 = {fontSize: 10} // property must be camelCase
      * style = {this.styles1}
    * inline
      * style = {{fontSize: 80}}
  * className (not class)

### List

```jsx  
state = { 
      count: 0,
      tags: ['tag1','tag2','tag3']
    };

{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}
```

### Inter-component communication

* (src)can include other component(target)
  * </Counter>
* (src)can pass value to target components
  * via target.props
    * src (i.e. Counters)
      * </Counter targetProps1="targetProps1Value">
    * target (i.e. Counter)
      * console.log(this.props.targetProps1); // log "targetProps1Value"
  * via target.children
    * src
      * \<Counter>\<h4>product name1</h4></Counter>
    * target
      * console.log(this.children); // log \<h4>product name1</h4>
* (src)can pass function(as object) to target components
  * via target.props
    * src (i.e. Counters)
      * \<Counter handleDelete={this.handleDeleteParent}>
    * target (i.e. Counter)
      * onClick={this.props.handleDelete}
* (src)can pass state(as object) to target components
  * via target.props
    * src (i.e. Counters)
      * \<Counter counters={this.counters}>
    * target (i.e. Counter)
      * console.log("id : " + {this.props.counters.id});

## Best Practice

* use tools to help
  * visual studio code
    * prettier
    * zencoding
      * use zencoding whenever possible
      * <http://www.cheat-sheets.org/saved-copy/ZenCodingCheatSheet.pdf>
    * Auto Import - ES6, TS, JSX, TSX
  * library
    * bootstrap
    * font-awesome
    * [lodash(pka underscore)](https://lodash.com/docs/)
    * query-string
    * joi
      * form validation - .required().min(8).max(16).regex([a-z]?[A-Z]?[0-9](8,16)).label("Friendaly Name")
    * axios (npm i axios@0.18)
      * http client
    * toastify (npm i react-toastify@4.1)
      * replacing alert
* coding practice
  * use let instead of var
  * be familiar with [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)
    * E.g.
      * not null is considered truthy
      * undefined and null is considered falsy
  * be careful with the use of && and ||
    * &&
      * will return right operand if left operand is truthy
    * ||
      * will return left operand if left operand is truthy, if falsy, then return right operand
  * convention
    * function name
      * camelCase
      * starts with handle*
    * variable name
      * plural should append with s
      * utility class should use generic name such as item(e.g. handleItem vs handleMovie; itemCount vs movieCount)
  * JSX returned by render method must consists of only 1 root element - encapsulate with \<div> or <react.fragment>
  * use arrow function instead of constructor with binding to access "this"
  * state should modified
    * only by component that owns it, OR
    * when there's parent/child component relationship, child should be a controlled component (no local state), and all value should entirely controlled by parent (value also should come from parent only)
      * parent should declare all the function and pass the reference to child
  * when dealing with component list, always make sure "key" value is set, and always unique (since React render by comparing virtualdom and dom, it needs a unique id to compare)
  * do not modify the state directly, always clone the state and setState(clone)
  * using object as argument rather than literals when passing control from/to components
    * then, when there are new member in the object, no need to chnage code
  * common items
    * design consideration
      * think of the input and callback
        * tableheader with sorting capability
          * E.g.
            * input
              * columns = [{key,path,label},...] // {1,"title","Title"}
              * sortState = {columnName, sortOrder} // title, desc
            * callback
              * handleSorting = f
    * should be coded in different js and export/import to promote usability
      * src/components/common/
      * src/utils/
    * name should be generic
    * property should have default value (Component.defaultProps = {key:defaultValue})
    * should not be tied to caller logic (e.g. item._id shoud le item[keyProperty] where keyProperty can be passed in caller)
  * cleaner code
    * always destructure your arguments to make code cleaner
    * decoupling
      * decouple UI code from logic code(parent)
      * decouple high level code (\<Component/>) from low level code(\<table>\<tr>)
* Router
  * router is not really routing, is more like render component at the defined location based on the path, url and query parameter
  * when using switch, always declare the more specific function/url first followed by less specific function/url
  * parameters
    * optional parameters is better as query parameter than url parameters
* Form
  * always initialized controlled element state properties to string (cannot null or undefined)
  * all react handler by default gets a [sytheticevent](https://reactjs.org/docs/events.html)
    * do not pass "this" to event handler (i.e. onChange={onChange(this)}) since "this" is refers to the dom itself
    * use Joi(joi-browser@13.4) to validate forms object
* API
  * use axios
  * use optimistics rather than pessimistics update
    * UI looks more friendly
  * use axios.interceptors.response/request to ***prehandle condition globally***
  * implement try/catch only for specific condition (e.g. when there's input parameter)
    * /api/posts - get all - no need since got error is unexpected (network, database)
    * /api/posts/1 - get specific - need to catch since client might pass in a wrong value (i.e. "1" doesn't exist in db)

## Cheatsheet

| type   | code                                                                                | description                                                                          |
| :----- | :---------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------- |
| vscode | imrc > tab                                                                          | import react ocmponent                                                               |
| vscode | cc > tab                                                                            | create class component skeleton                                                      |
| vscode | ccc > tab                                                                           | create class component with constructor                                              |
| vscode | sfc > tab                                                                           | create stateless functional component skeleton                                       |
| vscode | table.table>thead>tr>td*4>h1+span.m-2[style="cursor:pointer"] + tab                 | generate table with thead,tr,4 Td, h1 and span(same lvl) with style; zen             |
| css    | \<span className=\{\{m-2 col-2\}\}\/>\<span className=\{\{col\}\}>                  | 1st column occupy 2 column(grid system has 12 columns); 2nd span the rest of columns |
| js     | Object.keys(errors).length                                                          | length of all keys of an object                                                      |
| js     | let errors = { errors: errors \|\| {} }                                             | "\|\|" return left operand if left operand is truthy                                 |
| js     | const counters = [...this.state.counters, {}]                                       | clone object array with additional object                                            |
| js     | totalCounters={this.state.counters.filter(c=>c.value>0).length}/>                   | copy with filtering condition and results in array object                            |
| js     | let person ={persons.filter(p=>p.name==="ian");                                     | copy with filtering condition and results in array object                            |
| js     | const index = counters.indexOf(counter); const counter = counters[index];           | getting the index of object in an array and get the object based on index            |
| js     | this.state.counters.map((counter)=>console.log(counter.id));                        | iterate                                                                              |
| js     | const a1 = [1,2,3]; const a2 = [4,5,6];const combined = [...a1, 'a', ...a2, 'b'];   | combine array and new item                                                           |
| js     | item={id:"1", name:"ian"}; key="id";item[key] == 1;//true                           | access value of items dynamically by name(i.e. no hardcode like item.id)             |
| js     | let name="id";let property = { [name]: value };                                     | set object key dynamically                                                           |
| lodash | let pages = lodash.range(min, max);                                                 | create array with min, max size                                                      |
| lodash | _(items).slice(startIndex).take(pageSize).value()                                   | cut a chuck sizes(pageSize) of items from start(index)                               |
| lodash | const sortedMovies = _.orderBy(array,["field1",...],["asc"];                        | sorting array                                                                        |
| lodash | _.get(object, path)                                                                 | get object member by path                                                            |
| joi    | schema = {uname: Joi.required()};let errors = Joi.validate({uname:""}, schema)      | define Joi schema,validate object and return validation message with friendly name   |
| axios  | const { data: posts } = await axios.get(getEndpoint);                               | get from rest api                                                                    |
| axios  | const { data: post } = await http.post(postEndpoint, { title: "a", body: "b" });    | post to rest api with body                                                           |
| axios  | const data = await http.patch(putEndpoint + "/" + post.id, {title: post.title});    | update a single property of an object(post update the whole object)                  |
| axios  | const data = await http.put(putEndpoint + "/" + post.id, post);                     | update an object                                                                     |
| react  | npm i query-string@6.1.0; queryString.parse(location.search);                       | parse queryString as object                                                          |
| react  | this.setState({counters});                                                          | update state and refresh the view                                                    |
| react  | {error && \<div className="alert alert-danger">{error}</div>}                       | show when "error" is not null                                                        |
| react  | React.Fragment                                                                      | create component without div                                                         |
| react  | const {handleReset, counters} = this.props; handleReset();                          | destructing argument                                                                 |
| react  | const {handleReset: customVarName} = this.props; customVarName();                   | destructing argument with custom variable name                                       |
| react  | onClick={() => handleReset(this.state.counters)}                                    | pass reference to a method with arg                                                  |
| react  | state={m1: name => \<h1>welcome {name}</h1>}; \<Profile m1={this.state.m1}/>        | pass reference to a method with arg as object member                                 |
| react  | onClick={handleReset}                                                               | pass reference to a method without arg                                               |
| react  | parent - \<Counter total=1>; child - this.props.total                               | passing value from parent to child                                                   |
| react  | parent - \<Counter fn1={fn1}>; child - this.props.fn1()                             | passing method(no arg) reference from parent to child                                |
| react  | parent - \<Counter fn1={fn1}>; child - () => this.props.fn1(param1,param2)          | passing method(with arg) reference from parent to child                              |
| react  | this.setState({movie}); // rather than {movie:movie}.                               | ecma6; use when key=value;shorter and cleaner code                                   |
| react  | Pagination.propTypes = {itemCount: PropTypes.number.isRequired}                     | enforce type - number and required - for a class member                              |
| react  | MyComponent.defaultProps = { customProp: "default value"}                           | set default value for props member                                                   |
| react  | \<Route path="/path" component="Products"/>                                         | render component based on path with standard props                                   |
| react  | \<Route render={(props)=>\<Product product={product} {...props}/>}/>                | render component based on path with custom(i.e. product) and standard props          |
| react  | \<Link to="/path"/>                                                                 | change url without reloading bundle.js                                               |
| react  | \<NavLink to="/path">                                                               | change url; highlight automatically once clicked                                     |
| react  | \<Switch/>\<Link/>                                                                  | render component based on path. If match, stop processing the rest                   |
| react  | \<Route path="/posts/:year?" component={Posts} />; year=this.props.match.param.year | path with optional parameters                                                        |
| react  | http://url/?year - let {year} = queryString.parse(this.props.location.search);      | read query param                                                                     |
| react  | http://url/:year/ - let year = this.props.match.params.year                         | read url param                                                                       |
| react  | this.props.history.replace(url)                                                     | change browser url without history                                                   |
| react  | this.props.history.push(url)                                                        | change browser url with history                                                      |
| react  | \<form onSubmit=\{this.handleSubmit\}>\<button name=Login/>                         | submit form                                                                          |
| react  | \<input onChange=\{this.onChange\}/>;onChange(e) {}                                 | call function when input changes                                                     |
| react  | \<select onChange=\{this.onChange}>/>;onChange(e) {}                                | call function when select changes                                                    |

## ES6 Refresher

### var vs let const

* var

```js
function test() {
  for(var i = 0;i<5;i++) {
    console.log(i); // i is accessible
  }
  console.log(i); // i is accessible
}
```

* let

```js
function test() {
  for(let i = 0;i<5;i++) {
    console.log(i); // i is accessible
  }
  console.log(i); // i is NOT accessible
}
```

* const

const i = 1;
i = i++; // compilation error since const is read only

#### Comparison

| command | scope    | read? write? | remarks                            |
| :------ | :------- | :----------- | :--------------------------------- |
| var     | function | read/write   | try to not use this                |
| let     | block    | read/write   | like java; use this instead of var |
| const   | block    | read only    |                                    |

### This

* return object if called within method
* return window is called outside of method

```js
person = {
  walk() {
    console.log(this);
  }
}

person.walk(); // this will refer to the object
const walk = person.walk;
walk(); // this will be undefined(strict mdoe) or window object(non-strict mode)
```

### Bind

```js
person = {
  walk() {
    console.log(this);
  }
}

const walk = person.walk.bind(person);

walk();// this will return person
```

### Arrow Function - (=>)

* ecma6 only
* arrow function inherits "this"

#### promote shorter and cleaner code

* by removing "function" and "return"

##### Example 1

```js
// old code
const square = function(number) {
  return number*number;
}

// new code
const square = (number) => number*number
const square = number => number*number // if single arg
```

##### Example 2

```js
const jobs = [
  {id:1. isActive:true},
  {id:2. isActive:true},  
]

// old
const activeJobs = jobs.filter(function(job){return job.isActive;})
// new
const activeJobs = jobs.filter(job=>job.isActive);
```

#### Reference a method with parameter

##### Example 1

```js
onClick={() => this.props.handleIncrement(this.props.counter)}
```

### Map(method) - array.map(o=>...)

* ecma6 only

```js
const colors = ["green","blue","red"];
colors.map(color=>'<div>'+color+'</div>');
// template literal (`` and ${var})
colors.map(color=>`<div>${color}</div>`);
```

### Object destructring - const {member} = object

* instead of calling this.props. multiple times in counters.jsx, we can destructure the argemnets
  * from
    * <Counter handleIncrement={this.props.handleIncrement} handleReset={this.handleReset}>
  * to
    * const {handleIncrement, handleReset} = this.props;
    * <Counter handleIncrement={handleIncrement} handleReset={handleReset}>

### Spread Operator - {...}

* ecma6

#### combine array

```js
const first = [1,2,3]; const second = [4,5,6];
//old
const combined = first.concat(second);
//new
const combined = [...first, 'a', ...second, 'b'];
```

#### clone array

```js
state = [[]];
const counters = [...this.state.counters];
```

#### combine object

```js
const first = {"name": "ian"};
const second = {"job": "programmer"};

const combined = {...first, ...second, "location": "singapore"};
```

#### clone object

``js
const first = {"name": "ian"};
const second = {...first};
``

### Classes (class)

* create blue print

```js
class Person {
  constructor(name) 
    this.name = name;
  }
  walk() {
    console.log(this.name, "walk");
  }
}

const ian = new Person("ian");
const john = new Person("john");
```

### Inheritance(extends)

* extends base class
  * child constructor need to call super constructor

```js
class Teacher extends Person {
  constructor(name, degree) {
    super(name);
    this.degree = degree;
  }
}

const teacher1 = new Teacher("marry", "master of science");

teacher1.walk();
```

### Modularity

* es6
* save each class into different file
  * export to make it public
  * import(by relative path) to use
* Person.js

```js
export class Person {
  constructor(name) 
    this.name = name;
  }
  walk() {
    console.log(this.name, "walk");
  }
}
```

* teacher.js

```js
import { Teacher} from "./teacher"
class Teacher extends Person {
  constructor(name, degree) {
    super(name);
    this.degree = degree;
  }
}
```

### Export/Import

* es6

| export syntax                     | import syntax              |
| :-------------------------------- | :------------------------- |
| export default class/function ... | import ... from 'module'   |
| export class/function ...         | import {...} from 'module' |

### Setting up vidly project

* create-react-app vidly
* cd vidly
* npm i bootstrap@4.1.1 font-awesome@4.7.0
* goto getbootstrap.com > examples > find starter template > right clikc view source > find "container" and copy the <main> dom
* edit index.js 

```js
import "bootstrap/dist/css/bootstrap.css";
import "font-awesome/css/font-awesome.css";
```

* edit app.js

```js
function App() {
  return <main className="container">hello world</main>;
}
```

* download <https://cdn.fs.teachablecdn.com/TozKsswWRDS1wbUQTgew>
* extract to services/ folder
  * services/fakeGenreService.js
  * sefvices/fakeMovieService.js
    * _id is the default id column in MongoDB

## Components

### preparation

* softwares
  * node
    * module
      * create-react-app (npm i -g create-react-app@1.5.2)
* ide
  * visual studio code
  * extensions
    * prettier - code formatter
      * configure
        * settings
          * editor
            * default formatter
              * select prettier - code formatter
            * format on save: true
            * format on save mode: file
    * simple react snippet
      * imrc + tab
        * import React, { Component } from 'react';
      * cc + tab
        * import class skeleton
      * sfc + tab
        * create stateless functional components
    * Auto Import - ES6, TS, JSX, TSX

### development

* npm init react-app my-app
* cd my-app
* npm start
* visit <http://localhost:3000>

#### Project structure

* /public - public files (favicon.ico)
  * index.html - main html to render
* src - folders for components

#### Hello World

* create src/index.js with content below

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

const element = <h1>hello world</h1>;

ReactDOM.render(element, document.getElementById('root'));//which wil render "element" into index.html's root div
```

### install bootstarp

* npm i bootstrap@4.1.1
* import into index.js
  * edit index.js
  * import 'bootstrap/dist/css/bootstrap.css';

### create components

* create src/components/counter.jsx
* edit counter.jsx

```jsx
import React, { Component } from 'react'; 
class Counter extends React.Component {
    render() { 
        return <h1>hello world</h1>;
    }
}
 
export default Counter;
```

* import into index.jsx and render

```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import 'bootstrap/dist/css/bootstrap.css';
import Counter from './components/counter'; // here

ReactDOM.render(
  <Counter/>,  // here
  document.getElementById('root')
);
...
```

* refresh page

### Embedding Expression

* edit counter.jsx

```jsx
render() { 
    return <div class="temp"><h1>hello world</h1><button>increment</button></div>;
    // return <React.Fragment><h1>hello world</h1><button>increment</button></React.Fragment> // if you don't want the extra div.temp
}
```

### Embedding Expression - with state (36:01)

* edit counter.jsx and add

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
  // add state
  state = {
    count: 1,
  };

  render() {
    return (
      <div>
        <span>{this.formatCount()}</span>
        <button>increment</button>
      </div>
    );
  }

  formatCount() {
    //return this.state.count === 0 ? 'zero': this.state.count;
    //const cnt = this.state.count;
    //return cnt === 0 ? 'zero' : cnt;
    const { count } = this.state;
    //return count === 0 ? zero : count;
    return count === 0 ? <h1>zero</h1> : count;
  }
}

export default Counter;
```

### Setting Attributes (40:55)

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
  // add state
  state = { count: 0 };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span id="1" style={this.styles} className="badge badge-primary m-2">{this.formatCount()}</span> // non-inline style
        <button style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button> // inline style
      </div>
    );
  }

  formatCount() {
    //return this.state.count === 0 ? 'zero': this.state.count;
    //const cnt = this.state.count;
    //return cnt === 0 ? 'zero' : cnt;
    const { count } = this.state;
    return count === 0 ? "zero" : count;
  }
}

export default Counter;
```

### Rendering Classes Dynamically (46:40)

* change zero to yellow when zero

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
  // add state
  state = { count: 0 };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span id="1" style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>
        <button style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
      </div>
    );
  }

    getBadgeClasses() {
        let classes = "badge m-2 badge-";
        classes += (this.state.count === 0) ? "warning" : "primary";
        return classes;
    }

    formatCount() {
        //return this.state.count === 0 ? 'zero': this.state.count;
        //const cnt = this.state.count;
        //return cnt === 0 ? 'zero' : cnt;
        const { count } = this.state;
        return count === 0 ? "zero" : count;
    }
}

export default Counter;
```

### Rendering Lists - Using Map to Loop (51:02)

* render list of items

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
  state = { 
    count: 0,
    tags: ['tag1','tag2','tag3'] // here
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span id="1" style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span> // display count here
        <button style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
        <ul>
            {this.state.tags.map(tag => <li key={tag}>{tag}</li>)} // here
        </ul>
      </div>
    );
  }

  getBadgeClasses() {
      let classes = "badge m-2 badge-";
      classes += (this.state.count === 0) ? "warning" : "primary";
      return classes;
  }

  formatCount() {
      const { count } = this.state;
      return count === 0 ? "zero" : count;
  }
}

export default Counter;
```

### Conditional Rendering (55:00)

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
		count: 0,
		tags: ['tag1','tag2','tag3']
	};

	styles = {fontSize: 12}; 

	render() {
		return (
		<div>
			{this.state.tags.length===0?"Please create new tag":"Your selection"}
			{this.renderTags()}
		</div>
		);
	}

	renderTags() {
		if ( this.state.tags.length===0 ) return "no tags defined";
		
		return <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul>;
	}
}
```

export default Counter;

### Handling Events (1:00:05)

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
  state = { 
    count: 0,
    tags: ['tag1','tag2','tag3'] 
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span id="1" style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span> // display count here
        <button onClick={this.handleIncrement} // here
        style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
        <ul>
            {this.state.tags.map(tag => <li key={tag}>{tag}</li>)} // here
        </ul>
      </div>
    );
  }

  getBadgeClasses() {
		let classes = "badge m-2 badge-";
		classes += (this.state.count === 0) ? "warning" : "primary";
		return classes;
  }

  formatCount() {
		const { count } = this.state;
		return count === 0 ? "zero" : count;
  }

	handleIncrement() {// here
		console.log(11);
	}
}

export default Counter;
```

### Binding Event Handler (1:00:04)

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
    count: 0,
    tags: ['tag1','tag2','tag3'] 
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span> // display count here
        <button onClick={this.handleIncrement} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
        <ul>
            {this.state.tags.map(tag => <li key={tag}>{tag}</li>)} 
        </ul>
      </div>
    );
  }

  getBadgeClasses() {
		let classes = "badge m-2 badge-";
		classes += (this.state.count === 0) ? "warning" : "primary";
		return classes;
  }

  formatCount() {
		const { count } = this.state;
		return count === 0 ? "zero" : count;
  }

	handleIncrement = () => { // here
		this.state.count = this.state.count + 1;

		console.log(this);
	}
}

export default Counter;
```

### Updating The State (1:00:08)

* update the state and refresh the view (using Component.setState(object))

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
    count: 0,
    tags: ['tag1','tag2','tag3'] 
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span> // display count here
        <button onClick={this.handleIncrement} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
        <ul>
            {this.state.tags.map(tag => <li key={tag}>{tag}</li>)} 
        </ul>
      </div>
    );
  }

  getBadgeClasses() {
		let classes = "badge m-2 badge-";
		classes += (this.state.count === 0) ? "warning" : "primary";
		return classes;
  }

  formatCount() {
		const { count } = this.state;
		return count === 0 ? "zero" : count;
  }

	handleIncrement = () => {
		this.state.count++;
		this.setState({count: this.state.count++}); // here
	}
}

export default Counter;
```

### What happen when state changes (1:00:11)

* state changes > virtual changes > actual dom changes
  * only affected dom are updated on this page (other dom is not affected)

### Passing Events Arguments for Method Referencing (1:00:13)

* change from

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
    count: 0,
    tags: ['tag1','tag2','tag3'] 
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span> // display count here
        <button onClick={() => this.handleIncrement("name1")} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button> // here
        <ul>
            {this.state.tags.map(tag => <li key={tag}>{tag}</li>)} 
        </ul>
      </div>
    );
  }

  getBadgeClasses() {
		let classes = "badge m-2 badge-";
		classes += (this.state.count === 0) ? "warning" : "primary";
		return classes;
  }

  formatCount() {
		const { count } = this.state;
		return count === 0 ? "zero" : count;
  }

	handleIncrement = (productName) => { // here
		console.log("incrementing for production " + productName);
		this.state.count++;
		this.setState({count: this.state.count++});
	}
}

export default Counter;
```

## Composing Components

### Composing Components (1:17:34)

* create src/counters.jsx
* edit index.js

```js
import Counters from './components/counters'//here
...
ReactDOM.render(
  <Counters/>,//here
  document.getElementById('root')
);
```

* edit counters.jsx

```jsx
import React, { Component } from 'react';
import Counter from './counter'

class Counters extends React.Component {
  state = {
    counters: [
      {id:1, value:3},//here
      {id:2, value:0},//here
      {id:3, value:0},//here
      {id:4, value:0}//here
    ]
  }

  render() { 
    return (<div>
      {this.state.counters.map(counter=>
        <Counter 
          id={counter.id}
          value={counter.value}
        />
      )}
    </div>);
  }
}
 
export default Counters;
```

### Passing Children (1:24:35)

* counters.jsx

```jsx
import React, { Component } from 'react';
import Counter from './counter'

class Counters extends React.Component {
  state = {
    counters: [
      {id:1, value:3},
      {id:2, value:0},
      {id:3, value:0},
      {id:4, value:0}
    ]
  }

  render() { 
    return (<div>
      {this.state.counters.map(counter=>
        <Counter 
          key={counter.id} 
          id={counter.id}
          value={counter.value}
          titleName={counter.id}
        /> // here
      )}
    </div>);
  }
}
 
export default Counters;
```

* counter.jsx

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
    count: this.props.value // here
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
        {this.props.titleName} // here
        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>
        <button onClick={() => this.handleIncrement("name1")} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
      </div>
    );
  }

  getBadgeClasses() {
		let classes = "badge m-2 badge-";
		classes += (this.state.count === 0) ? "warning" : "primary";
		return classes;
  }

  formatCount() {
		const { count } = this.state;
		return count === 0 ? "zero" : count;
  }

	handleIncrement = (productName) => {
		console.log("incrementing for production " + productName);
		this.state.count++;
		this.setState({count: this.state.count++});
	}
}

export default Counter;
```

### Debugging React Apps (1:27:47)

* chrome
  * install react developer tools
  * inspect element
  * select react
* inspect element
  * you can see all the components

### Prop vs State(1:31:59)

| state                               | props                                                  |
| :---------------------------------- | :----------------------------------------------------- |
| read and write                      | read only; can only set during component instantiation |
| private;visible from component only | public; can see from outside                           |

### Decrement button

* edit counter.jsx
* add line below, go to end of the line and tab (auto-complete)

```txt
button.btn.btn-danger.btn-sm.m-2
```

* will become

```jsx
<button className="btn btn-danger btn-sm m-2"></button>
```

* edit counters.jsx (to pass contorl to counter)

```jsx
import React, { Component } from 'react';
import Counter from './counter'

class Counters extends React.Component {
  state = {
    counters: [
      {id:1, value:3},
      {id:2, value:0},
      {id:3, value:0},
      {id:4, value:0}
    ]
  }

  render() { 
    return (<div>
      {this.state.counters.map(counter=>
        <Counter 
          key={counter.id} 
          id={counter.id}
          value={counter.value}
          titleName={counter.id}
          handleDelete={this.handleDelete} // here
        />
      )}
    </div>);
  }

  handleDelete() { // here
    console.log("handleDelete ||| delete");
  }
}
 
export default Counters;
```

* edit counter.jsx

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
    count: this.props.value
  };

  styles = {fontSize: 12}; 

  render() {
    return (
      <div>
				Counter #{this.props.titleName}
        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>
        <button onClick={() => this.handleIncrement("name1")} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
				 <button onClick={this.props.handleDelete} className="btn btn-danger btn-sm m-2">delete</button> // here 
      </div>
    );
  }

  ...
}

export default Counter;
```

### Updating the delete state (1:39:19)

* counters.jsx

```jsx
import React, { Component } from 'react';
import Counter from './counter'

class Counters extends React.Component {
  ...

  handleDelete = (counterId) => { // here
    const counters = this.state.counters.filter(c=>c.id != counterId);

    this.setState({counters: counters});
  }
}
 
export default Counters;
```

* counters.jsx

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
  ...
  render() {
    return (
      <div>
        ...
				<button onClick={() => this.props.handleDelete(this.props.id)} className="btn btn-danger btn-sm m-2">delete</button> // here
      </div>
    );
  }
  ...
}

export default Counter;
```

### Passing whote object (1:41:37)

* counters.jsx

```jsx
import React, { Component } from 'react';
import Counter from './counter'

class Counters extends React.Component {
  ...
  render() { 
    return (<div>
      {this.state.counters.map(counter=>
        <Counter
          key={counter.id} 
          counter={counter} // here
          handleDelete={this.handleDelete}
        />
      )}
    </div>);
  }
  ...
}
 
export default Counters;
```

* counter.jsx

```jsx
import React, { Component } from "react";
class Counter extends React.Component {
	state = { 
    count: this.props.counter.value // here
  };
  ...
  render() {
    return (
      <div>
				Counter #{this.props.counter.id}
        <span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>
        <button onClick={() => this.handleIncrement("name1")} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button>
				 <button onClick={() => this.props.handleDelete(this.props.counter.id)} className="btn btn-danger btn-sm m-2">delete</button>
      </div>
    );
  }
  ...
}

export default Counter;
```

### single source of truth (1:44:00)

* deleting counters.state.counters will not refresh counter.state.count (since counter.state.count is initialized only once and component is re-render again)

### removing the local state - in counter (1:47:56)

* counters.jsx

```jsx
class Counters extends React.Component {
  ...
  render() { 
    return (<div>
      {this.state.counters.map(counter=>
        <Counter
          key={counter.id}
          counter={counter}
          handleDelete={this.handleDelete} // here
          handleIncrement={this.handleIncrement} // here
        />
      )}
    </div>);
  }
// here
  handleDelete = (counter) => {
    const counters = this.state.counters.filter(c=>c.id !== counter.id);

    this.setState({counters});
  }
// here
  handleIncrement = (counter) => {
    const counters = [...this.state.counters];
    const index = counters.indexOf(counter);    
    counters[index] = {...counter};
    counters[index].value++;
    this.setState({counters});
  }
}
 
export default Counters;
```

* counter.jsx

```jsx
class Counter extends React.Component {
  ...
  render() {
    return (
      <div>
        ...
        <button onClick={() => this.props.handleIncrement(this.props.counter)} style={{fontSize: 12}} className="btn btn-seconday btn-sm">increment</button> // here
				 <button onClick={() => this.props.handleDelete(this.props.counter)} className="btn btn-danger btn-sm m-2">delete</button> // here
      </div>
    );
  }
  ...
}

export default Counter;
```

### Multiple Components in Sync (1:54:47)

* we are going to change the component tree
  * from
    * App
      * NavBar
      * Counters - State
        * Counter
    * App - State
      * NavBar
      * Counters
        * Counter

* index.js - point to App

```js
ReactDOM.render(
  <App/>,
  document.getElementById('root')
);
```

* App.js - point to NavBar and Counters

```jsx
import NavBar from './components/navbar';
import Counters from './components/counters';
class App extends React.Component {
```

* goto <https://getbootstrap.com/docs/5.1/components/navbar/> and copy the html and paste below
* navbar.jsx - new file

```jsx
import React, { Component } from 'react';
class NavBar extends React.Component {
  render() { 
    return <nav className="navbar navbar-light bg-light">
    <div className="container-fluid">
      <a className="navbar-brand" href="#">Navbar</a>
    </div>
  </nav>;
  }
}
 
export default NavBar;
```


### Lifting State Up (2:00:42)

* move state and handle method from Counters to App
  * pass state/control from App to Counters
    * E.g.
      * counters={this.state.counters}
      * handleReset={this.handleReset}
  * pass state from App to NavBar
    * E.g.
      * <NavBar totalCounters={this.props.totalCounters}/>
  * change reference to props in Counters.jsx
    * E.g.
      * handleDelete={this.props.handleDelete}
  * show totalCounters state in NavBar
    * E.g.
      * {this.props.totalCounters}
* show state in navbar
* App.js

```js
import './App.css';
import NavBar from './components/navbar';
import React, { Component } from 'react';
import Counters from './components/counters';

class App extends React.Component {
  state = {
    counters: [
      {id:1, value:3},
      {id:2, value:2},
      {id:3, value:1},
      {id:4, value:0}
    ]
  }

  handleReset = () => {
    console.log("resetting");
    const counters = [...this.state.counters];
    counters.filter(c=>console.log("check : " + c.id + " : " + c.value));
    counters.filter(c=>c.value=0);
    this.setState({counters});
  }

  handleDelete = (counter) => {
    const counters = this.state.counters.filter(c=>c.id !== counter.id);

    this.setState({counters});
  }

  handleIncrement = (counter) => {
    const counters = [...this.state.counters];
    const index = counters.indexOf(counter);    
    counters[index] = {...counter};
    counters[index].value++;
    this.setState({counters});
  }

  render() { 
    return (
      <React.Fragment>
        <NavBar totalCounters={this.state.counters.filter(c=>c.value>0).length}/>
        <Counters
          counters={this.state.counters}
          handleReset={this.handleReset} 
          handleIncrement={this.handleIncrement}
          handleDelete={this.handleDelete}
        />
      </React.Fragment>
    );
  }
}
 
export default App;
```

* Counters.jsx

```jsx
import React, { Component } from 'react';
import Counter from './counter'

class Counters extends React.Component {
  render() { 
    return (<div>
      <div><button className="btn btn-primary btn-sm m-2" onClick={() => this.props.handleReset()}>reset</button></div>
      <div>{this.props.counters.map(counter=>
        <Counter
          key={counter.id}
          counter={counter}
          handleDelete={this.props.handleDelete}
          handleIncrement={this.props.handleIncrement}
        />
      )}</div>
    </div>);
  }
}
 
export default Counters;
```

### Stateless Functional Components - sfc(2:06:20)

* since navbar is view only with no helper function, we can decide to render class or sfc
* edit navbar.jsx
* sfc + tab

```jsx
const NavBar = () => {
  return <nav className="navbar navbar-light bg-light">
  <div className="container-fluid">
    <a className="navbar-brand" href="#">Navbar 
      <span className="badge badge-pill badge-secondary">{this.props.totalCounters}</span></a>
  </div>
</nav>;
}
 
export default NavBar;
```

### Destructuring Arguments (2:08:53)

* instead of calling this.props. multiple times in counters.jsx, we can destructure the argemnets
  * from
    * <Counter handleIncrement={this.props.handleIncrement} handleReset={this.handleReset}>
  * to
    * const {handleIncrement, handleReset} = this.props;
    * <Counter handleIncrement={handleIncrement} handleReset={handleReset}>

### Lifecycle Hook (2:10:54)

* can only use on component (cannot use on SFC)
* 3 phase with hook (method)
  * mount - create compoment
    * hook
      * constructor
      * render
      * componentDidMount - DOM rendered
  * update - update componnet
    * render
    * componentDidUpdate
  * unmount - remove component
    * componentWillUnmount

### Mounting Phase (2:12:33)

* when render is called, the child render is called too
* constructor is called only once
* componentDidMount should be the place when api is invoked to get data and render the UI

### Updating Phase (2:18:12)

* componentDidUpdate can use to compare values and decide to fetch from api

```js
componentDidUpdate(prevProps, prevState) {
  console.log(prevProps);
}
```

### Unmounting Phase (2:18:12)

* call before component is removed
* componentWillUnmount can be called to do cleanup

### 19/20 - Exercise

* add decrement button
  * disable decrement button when 0
* use bootstrap grid
  * col-1
    * first column
  * col 
    * the rest of the column
* App.js

```js
  handleDecrement = (counter) => {
    const counters = [...this.state.counters];
    const index = counters.indexOf(counter);
    counters[index] = { ...counter };
    counters[index].value--;
    this.setState({ counters });
  };
  ...
  handleDelete={this.handleDelete}
```

* counters.jsx

```js
  render() {
    const {
      handleReset,
      handleDelete,
      handleIncrement,
      handleDecrement, // here
      counters,
    } = this.props;
...
          {counters.map((counter) => (
            <Counter
              key={counter.id}
              counter={counter}
              handleDelete={handleDelete}
              handleIncrement={handleIncrement}
              handleDecrement={handleDecrement} // here
            />
```

* counters.jsx

```js
<button
  onClick={() => this.props.handleDecrement(this.props.counter)}
  style={{ fontSize: 12 }}
  className="btn btn-seconday btn-sm m-2"
  disabled={this.props.counter.value === 0 ? "disabled" : ""}
>
  -
</button>
```

### 21/22 - Exercise

* add like (e.g. like button)
  * use [font awesome](https://fontawesome.com/v5.15/icons/heart?style=solid)
  * copy html
* add src/common folder
* create like.jsx

```html
import React, { Component } from "react";

class Like extends React.Component {
  handleLikeClass() {
    if (this.props.liked) return "fa fa-heart";
    else return "fa fa-heart-o";
  }
  render() {
    return (
      <span onClick={() => this.props.handleLiked(this.props.movie)}>
        <i style={{ cursor: "pointer" }} className={this.handleLikeClass()}></i>
      </span>
    );
  }
}

export default Like;
```

* movie.jsx
  * import like, pass control and movie object to like.jsx

```js
  <Like
    liked={liked}
    handleLiked={this.props.handleLiked}
    movie={this.props.movie}
  />
```

* movies.jsx
  * implement the method and pass the control to movie.jsx

```js
  handleLiked = (movie) => {
    let movies = [...this.state.movies];
    let index = this.state.movies.indexOf(movie);
    movies[index].liked = !movies[index].liked;
    this.setState({ movies });
  };
  ...
  <Movie
    key={m._id}
    movie={m}
    handleDelete={this.handleDelete}
    handleLiked={this.handleLiked}
  />
```

## Pagination, Filtering and Sorting

### Purpose

* component
* cleaner code
* refactoring

### 1,2,3,4 - Pagination Components

* goto [bootstrap pagination](https://getbootstrap.com/docs/4.0/components/pagination/) to get the html
* create src/components/common/pagination.jsx
* import and create paginatino component in movies.jsx
* move getMovies and getGenre to componentDidMount

```jsx
import Pagination from "./common/pagination";
...
  state = {
    movies: {}
    pageSize: 4,
  };

  componentDidMount() {
    this.setState({ movies: getMovies(), genres: getGenres() });
  }
  ...
          <Pagination
            itemCount={this.state.movies.length}
            itemPerPage={this.state.pageSize}
            handlePageChange={this.handlePageChange}
          />
```

* pagination.jsx

```js
import React, { Component } from "react";
import lodash from "lodash";
class Pagination extends Component {
  render() {
    const { itemCount, itemPerPage } = this.props;
    let numberOfPages = Math.ceil(itemCount / itemPerPage);
    let pages = lodash.range(1, numberOfPages + 1);
    if (numberOfPages == 1) return null; // don't render pagination if only 1 page

    return (
      <nav aria-label="Page navigation example"> // modify this from bootstrap pagination
        <ul className="pagination">
          {pages.map((page) => (
            <li key={page} className="page-item">
              <a
                className="page-link"
                onClick={() => this.props.handlePageChange(page)}
              >
                {page}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    );
  }
}
export default Pagination;
```

### 5 - handling page changes

* pagination.jsx
  * highlight when current page
  * click to call movies.handlePageChanged

```js
<li
  key={page}
  className={page == this.props.currentPage ? "page-item active" : "page-item"}
>
  <a
    className="page-link"
    onClick={() => this.props.handlePageChange(page)}
  >
    {page}
  </a>
</li>
```

* movies.jsx
  * implement handlePageChanged method
    * store currentPage into state
    * pass currentPage to pagination

```js
  state = {
    ...
    currentPage: 1,
  };
  ...
  handlePageChange = (page) => {
    this.setState({ currentPage: page });
  };
  ...
          <Pagination
            ...
            handlePageChange={this.handlePageChange}
          />
```

### 6 - Pagination - Paginating Data

* create src/utils/paginate.js
  * common function to handle pagination
    * use lodash

```js
import _ from "lodash";

export function paginate(items, pageNumber, pageSize) {
  const startIndex = (pageNumber - 1) * pageSize;
  return _(items).slice(startIndex).take(pageSize).value();
}
```

* edit movies.jsx
  * import and call paginate
  * change reference from this.state.movie to movie

```js
...
import { paginate } from "../utils/paginate";
...
  render() {
    const movies = paginate(
      this.state.movies,
      this.state.currentPage,
      this.state.pageSize
    );
    ...
    <Summary count={movies.length} />
    ...
              {movies.map((m) => (
                <Movie
```

### 7 - Pagination - type checking with proptypes (optional)

* npm i prop-types@15.6.2
* edit paginatation.jsx
  * import PropTypes
  * declare PropTypes for member

```js
import PropTypes from "prop-types";
...
Pagination.propTypes = {
  itemCount: PropTypes.number.isRequired,
  itemPerPage: PropTypes.number.isRequired,
  currentPage: PropTypes.number.isRequired,
  handlePageChange: PropTypes.func.isRequired,
};
```

### 8,9,12,13,14 - Exercise - ListGroup Component and Interface/handling selection/implement filtering/adding All genres

* create Filter.jsx
  * use bootstrap listgroup html snippet
  * make sure component can be reused
    * change item._id to item[this.state.keyProperty] (where keyProperty="_id" which is configrable by caller)
  * add "all" option
  * call handleFilterItems when clicked
    * paginate the filtered items
    * refresh the UI

```js
import React, { Component } from "react";
class Filter extends React.Component {
  getItems() {
    return this.props.items.map((item) => (
      <li
        key={item[this.props.keyProperty]}
        onClick={() => this.props.handleFilterItems(item)}
        className={
          item[this.props.keyProperty] ===
          this.props.selectedItem[this.props.keyProperty]
            ? "list-group-item active"
            : "list-group-item"
        }
        style={{ cursor: "pointer" }}
      >
        {item[this.props.nameProperty]}
      </li>
    ));
  }

  render() {
    return <ul className="list-group">{this.getItems()}</ul>;
  }
}
export default Filter;
```

* movies.jsx
  * import filter.jsx
  * initializes state
  * filter before paginate or return all if crrentFilter=all
  * include Filter component and pass in parameters and controls

```js
import Filter from "./common/filter";
...
  state = {
    ...
    currentFilter: "all",
  };
  ...
  componentDidMount() {
    this.setState({
      movies: getMovies(),
      genres: [{ name: "All Genres" }, ...getGenres()],
    });
  }
  ...
  render() {
    const allMovies = [...this.state.movies];
    const filteredMovies =
      this.state.selectedGenre && this.state.selectedGenre._id == undefined // all
        ? allMovies
        : allMovies.filter((m) => m.genre._id === this.state.selectedGenre._id);
    const paginatedMovies = paginate(
      filteredMovies,
      this.state.currentPage,
      this.state.pageSize
    );
    ...
          <Filter
            currentFilter={this.state.currentFilter}
            items={getGenres()}
            keyProperty="_id"
            nameProperty="name"
            handleFilterItems={this.handleFilterItems}
          />
```

### 10,11 - Filtering - Displaying Items/Default Props

* keyProperty and nameProperty in filter.jsx can be configure to accept default value
  * If caller do not passed in value, default value will be used
* filter.js

```js
Filter.defaultProps = {
  keyProperty: "_id",
  nameProperty: "name",
};
```

* movies.jsx

```js
            items={getGenres()}
            keyProperty="_id" // remove this line
            nameProperty="name" // remove this line
            handleFilterItems={this.handleFilterItems}
```

### 15,16 - extracting moviestables/raising the sort event

* create src/component/MovieTable.jsx and move all <table> related code inside
  * import into movies.jsx  and use it
* movietable.jsx

```js
import React, { Component } from "react";
import Movie from "./movie";

class MovieTable extends React.Component {
  render() {
    const { movies, handleDelete, handleLiked } = this.props;

    return (
      <table className="table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Genre</th>
            <th>Stock</th>
            <th>Rate</th>
            <th>Liked?</th>
            <th>Delete</th>
          </tr>
          {movies.map((m) => (
            <Movie
              key={m._id}
              movie={m}
              handleDelete={handleDelete}
              handleLiked={handleLiked}
            />
          ))}
        </thead>
      </table>
    );
  }
}

export default MovieTable;

```

* movie.jsx

```js
          <MovieTable
            movies={paginatedMovies}
            handleLiked={this.handleLiked}
            handleDelete={this.handleDelete}
          />
```

### 17,18 - implemting soirting/moving responsibility

* sort the filtered - all columns + asc/desc
* movietable.jsx

```js
  handleSort = (columnName) => {
    const sortOrder = this.props.sortState.sortOrder === "asc" ? "desc" : "asc";
    this.props.handleSort({ columnName, sortOrder });
  };
...
  render() {
    ...
            <th onClick={() => this.handleSort("title")}>Title</th>
            <th onClick={() => this.handleSort("genre.name")}>Genre</th>
            <th onClick={() => this.handleSort("numberInStock")}>Stock</th>
            <th onClick={() => this.handleSort("dailyRentalRate")}>Rate</th>
```

* movies.jsx

```js
  ...
  state = {
    ...
    selectedGenre: { _id: "all", name: "All Genres" },
    sortState: { columnName: "title", sortOrder: "asc" },
  };

  componentDidMount() {
    this.setState({
      ...
      genres: [{ _id: "all", name: "All Genres" }, ...getGenres()],
    });
  }
  ...
  handleSort = (sortState) => {
    this.setState({
      sortState,
    });
  };
  ...
  render() {
    ...
    const filteredMovies =
      this.state.selectedGenre && this.state.selectedGenre._id === "all"
        ? allMovies
        : allMovies.filter((m) => m.genre._id === this.state.selectedGenre._id);

    const sortedMovies = _.orderBy(
      filteredMovies,
      [this.state.sortState.columnName],
      [this.state.sortState.sortOrder]
    );

    const paginatedMovies = paginate(
      sortedMovies,
      ...
    );
    ...
          <MovieTable
            ...
            handleSort={this.handleSort}
          />
```

### 19 - extracting tableheader

* create tableHeader.jsx
  * input parameter
    * columns = [{key,path,label},...]
    * sortState = {columnName, sortOrder}
    * handleSort = f

```js
import React, { Component } from "react";

// columns = [{key,path,label},...]
// sortState = {columnName, sortOrder}
// handleSort = f
class TableHeader extends React.Component {
  handleSort = (columnName) => {
    const sortOrder = this.props.sortState.sortOrder === "asc" ? "desc" : "asc";
    this.props.handleSort({ columnName, sortOrder });
  };

  render() {
    return this.props.columns.map((c) => (
      <th
        style={{ cursor: "pointer" }}
        key={c.key}
        onClick={() => this.handleSort(c.path)}
      >
        {c.label}
      </th>
    ));
  }
}

export default TableHeader;
```

* movietable.jsx
  * import and create table header
  * create columns array and pass to tableheader
  * pass sortState
  * pass handleSort

```js
    let columns = [
      { key: 1, path: "title", label: "Title" },
      { key: 2, path: "genre.name", label: "Genre" },
      { key: 3, path: "numberInStock", label: "Stock" },
      { key: 4, path: "dailyRentalRate", label: "Rate" },
      { key: 5, label: "Liked" },
      { key: 6, label: "Delete" },
    ];
    ...
    render() {
      ...
                  <TableHeader
              handleSort={this.props.handleSort}
              sortState={this.props.sortState}
              columns={columns}
            />
            ...
    }
```

### 20, 21, 22 - extracting tablebody, extracting cell content

* movietable.jsx

```jsx
...
    let columns = [
      { key: 1, path: "title", label: "Title" },
      { key: 2, path: "genre.name", label: "Genre" },
      { key: 3, path: "numberInStock", label: "Stock" },
      { key: 4, path: "dailyRentalRate", label: "Rate" },
      {
        key: 5,
        label: "Liked",
        content: (movie) => (
          <Like
            liked={movie.liked}
            handleLiked={this.props.handleLiked}
            item={movie}
          />
        ),
      },
      {
        key: 6,
        label: "Delete",
        content: (movie) => (
          <button
            className="btn btn-danger"
            onClick={() => this.props.handleDelete(movie)}
          >
            delete
          </button>
        ),
      },
    ];
    ...
    render() {
      ...
      <TableBody data={movies} columns={columns} />
      ...
    }
```

* common/tablebody.jsx

```jsx
import React from "react";
import _ from "lodash";
class TableBody extends React.Component {
  renderCell(item, column) {
    if (column.content) return column.content(item); // render like, delete or anything with content

    return _.get(item, column.path);
  }
  render() {
    const { data, columns } = this.props;

    return (
      <tbody>
        {data.map((item) => (
          <tr key={item["_id"]}>
            {columns.map((column) => (
              <td key={column.key}>{this.renderCell(item, column)}</td>
            ))}
          </tr>
        ))}
      </tbody>
    );
  }
}

export default TableBody;

```

### 23 - adding the sort icon

* index.css

```css
.clickable {
  cursor: "pointer"
}
```

* tableheader.jsx

```jsx
...
  renderSortIcon = (column) => {
    if (column.path !== this.props.sortState.columnName) return null;
    if (this.props.sortState.sortOrder === "asc")
      return <i className="fa fa-sort-asc"></i>;
    return <i className="fa fa-sort-desc"></i>;
  };
  ...
        <th
        style={{ cursor: "pointer" }}
        key={c.key}
        onClick={() => this.handleSort(c.path)}
      >
        {c.label} {this.renderSortIcon(c)}
      </th>
      ...

```

### 24 - extracting table (as common components)

* create common/table.jsx

```jsx
import React from "react";
import TableHeader from "./tableheader";
import TableBody from "./tablebody";
class Table extends React.Component {
  render() {
    return (
      <table className="table">
        <thead>
          <tr>
            <TableHeader
              handleSort={this.props.handleSort}
              sortState={this.props.sortState}
              columns={this.props.columns}
            />
          </tr>
        </thead>
        <TableBody data={this.props.data} columns={this.props.columns} />
      </table>
    );
  }
}

export default Table;
```

* movieTables.jsx
  * import table.jsx and use

```jsx
  import Table from "./common/table";
  ...
    return (
      <Table
        handleSort={this.props.handleSort}
        sortState={this.props.sortState}
        columns={columns}
        data={this.props.movies}
      />
    );
    ...
```

### 25 - extracting method

* movies.jsx

```jsx
...
  getPaginateMovies = () => {
    const allMovies = [...this.state.movies];
    const filteredMovies =
      this.state.selectedGenre && this.state.selectedGenre._id === "all"
        ? allMovies
        : allMovies.filter((m) => m.genre._id === this.state.selectedGenre._id);

    const sortedMovies = _.orderBy(
      filteredMovies,
      [this.state.sortState.columnName],
      [this.state.sortState.sortOrder]
    );

    const paginatedMovies = paginate(
      sortedMovies,
      this.state.currentPage,
      this.state.pageSize
    );

    return { paginatedMovies, filteredMovies };
  };
...
  render() {
    var result = this.getPaginateMovies();
  ...
            count={result.paginatedMovies.length}
            itemFilteredCount={result.filteredMovies.length}
  ...
}
```

## Routing (0:53)

### 1 - Introduction

* route parameters
* query string
* redirect
* 404
* nested routing

### 2 - setup

* download resource.zip
* extract resource.zip
* cd start/router-app
  * npm i
  * npm start
* visual studio code
  * install Auto Import - ES6, TS, JSX, TSX

### 3 - adding routing

* react router dom
  * route to component based on path
* cd start/router-app
* npm i react-router-dom@4.3.1
* start/router-app/src/index.js

```js
...
import { BrowserRouter } from "react-router-dom";
...
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  ...
);
...
```

* start/router-app/app.js

```js
...
import { Route } from "react-router-dom";
class App extends Component {
  render() {
    return (
          ...
          <Route path="/products" component={Products} />
          <Route path="/posts" component={Posts} />
          <Route path="/admin" component={Dashboard} />
          <Route path="/" component={Home} />
          ...
    );
  }
}

export default App;
```

### 4 - switch

* /products page shows both products and home components
  * to solve, use 
    * <Router exact>, OR
    * <Switch> 
      * will find exact match and stop processing
* app.js

```js
...
import { Route, Switch } from "react-router-dom";
class App extends Component {
  render() {
  ...
          <Switch>
            <Route path="/products" component={Products} />
...
          </Switch>
...
    );
  }
}

export default App;
```

### 5 - Link

* clickong only any link will refetch all resources
  * bundle.js
    * consists of all components in javascript
  * slow if refetch everytime
    * solve using Link
      * change
        * a to Link
        * href to "to"
* navbar.js

```js
import React from "react";
import { Link } from "react-router-dom";
const NavBar = () => {
  return (
      ...
        <Link to="/">Home</Link>
      ...
  );
};

export default NavBar;
```

### 6 - Route Props

* every routing, components will be injected with 3 extra props - refer <https://v5.reactrouter.com/web/guides/quick-start>
  * history - "past" info
  * location - "now" info
  * match - inforamtion on how url is matched

### 7 - Passing props

* how to add custom props to router?
  * use Router.render
    * it will go to this.props (i.e. this.props.sortBy)
* App.js

```js
...
class App extends Component {
  render() {
...
            <Route
              path="/products"
              render={(props) => <Products sortBy="newest" {...props} />}
            />
...
```
  
### 8 - Router parameters

* how to pass router parameters?
  * use ":"
    * will be stored in this.props.match.params
* App.js

```js
...
class App extends Component {
  render() {
    return (
...
            <Route path="/products/:id" component={ProductDetails} />
            <Route
              path="/products"
              render={(props) => <Products sortBy="newest" {...props} />}
            />
            <Route path="/posts/:year/:month" component={Posts} />
...
    );
  }
}
...
```

### 9 - Optional parameters

* use "?" (javascript means optional)
  * without "?", Switch will pick the next best in line (HOME)
* App.js

```js
...
class App extends Component {
  render() {
    return (
      ...
            <Route path="/posts/:year?/:month?" component={Posts} />
            ...
    );
  }
}
...
```

* posts.jsx

```js
...
const Posts = ({ match }) => {
...
      Year: {match.params.year}, Month:{match.params.month}
...
```

### 10 - query string parameters

* queyr parameter is stored in this.props.location.search
* to extract
  * npm i query-string@6.1.0
* queryString.parse always returns resuls in string value (need to parse yurself)
* <http://localhost:3000/posts/2018?sortBy=newest&approved=true>
* posts.jsx

```js
...
const Posts = ({ match, location }) => {
  const result = queryString.parse(location.search);
...
```

### 11 - Redirects

* use Redirect component
  * from/to
  * to
* app.js

```js
import { Route, Switch, Redirect } from "react-router-dom";
class App extends Component {
  render() {
    return (
...
            <Route path="/not-found" component={NotFound} />
            <Redirect from="/messages" to="/posts" />
            <Redirect to="/not-found" />
...
    );
  }
}

export default App;
```

### 12 - Programmatic Navigation

* use this.props.history
  * push - add new address into history and redirect
  * replace - replace current url with no hstory
    * mostly use in login page (after login successful then click back will not go back to login page)
* productDetails.jsx

```js
...
  handleSave = () => {
    // Navigate to /products
    this.props.history.push("/products");
  };
...
```

### 13 - nested routing

* dashboard.jsx

```js
...
import SideBar from "./sidebar";
import { Route } from "react-router-dom";
import Users from "./users";
import Posts from "./posts";
const Dashboard = ({ match }) => {
  return (
...
      <SideBar />
      <Route path="/admin/users" component={Users} />
      <Route path="/admin/posts" component={Posts} />
...
  );
};

export default Dashboard;
```

* SideBar.jsx

```jsx
...
import { Link } from "react-router-dom";
class SideBar extends React.Component {
  render() {
    return (
      <ul>
        <li>
          <Link to="/admin/posts">Posts</Link>
        </li>
        <li>
          <Link to="/admin/users">Users</Link>
        </li>
      </ul>
    );
  }
}

export default SideBar;
```

### 14 - Execise

* add menu and link to(use NavLink) - done
  * movies - done
  * customers - done
  * rentals - done
* invalid url - done
  * redirect to not-found - done
* root url redirect to movies url - done
* click movie title, redirect to movies/id details page
  * add save button
    * click redirect to movies landing page

### 15/16/17/18 - Adding React Router/Adding Routes/Adding the NavBar/Linking to the MovieForm

* index.js

```jsx
...
import { BrowserRouter } from "react-router-dom";
ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  ...
);
...
```

* create components (all return h1)
  * customers.jsx
  * render.jsx
  * notfound.jsx
* App.js

```jsx
...
import Customers from "./components/customers";
import Rentals from "./components/rentals";
import NavBar from "./components/common/navbar";
import NotFound from "./components/common/notfound";
import { Switch, Route, Redirect } from "react-router-dom";
import MovieForm from "./components/movieform";
function App() {
  let menus = [
    { link: "/movies", label: "Movies" },
    { link: "/customers", label: "Customers" },
    { link: "/rentals", label: "Rentals" },
  ];

  return (
    <React.Fragment>
      <NavBar menus={menus} />
      <Switch>
        <Route path="/notfound" component={NotFound} />
        <Route path="/movieform/:movieid" component={MovieForm} />
        <Route path="/movies" component={Movies} />
        <Route path="/customers" component={Customers} />
        <Route path="/rentals" component={Rentals} />
        <Redirect from="/" exact to="/movies" />
        <Redirect to="/notfound" />
      </Switch>
    </React.Fragment>
  );
}

export default App;
```

* navbar.jsx
  * copy html content from bootstrap

```jsx
import React from "react";
import { NavLink } from "react-router-dom";
class NavBar extends React.Component {
  render() {
    return (
      <nav className="navbar navbar-expand-lg navbar-light bg-light">
        <div className="collapse navbar-collapse" id="navbarSupportedContent">
          <ul className="navbar-nav mr-auto">
            {this.props.menus.map((m) => (
              <li className="nav-item m-2 ">
                <NavLink className="nav-link" to={m.link}>
                  {m.label}
                </NavLink>
              </li>
            ))}
          </ul>
        </div>
      </nav>
    );
  }
}

export default NavBar;
```

* movietable.jsx

```jsx
...
import { Link } from "react-router-dom";
class MovieTable extends React.Component {
  render() {
    let columns = [
      {
        ...
        content: (movie) => (
          <Link to={"/movieform/" + movie._id}>{movie.title}</Link>
        ),
      },
      ...
```

* movieform.jsx
  * copy html from bootstrap's form

```jsx
import React, { Component } from "react";
class MovieDetails extends React.Component {
  render() {
    return (
      <React.Fragment>
        <form className="m-2">
          <div class="form-group">
            <div>MovieDetails({this.props.match.params["movieid"]})</div>
          </div>
          <button
            type="submit"
            class="btn btn-primary"
            onClick={() => this.props.history.push("/movies")}
          >
            Submit
          </button>
        </form>
      </React.Fragment>
    );
  }
}

export default MovieDetails;

```

## Forms (1:34)

### 1 - Introduction

### 2 - Building a Bootstrap Form

* find html from [bootstrap form](https://getbootstrap.com/docs/4.0/components/forms/)
* create src/component/loginform.jsx
  * form>(div.form-group>label+input.form-control[type="email"][id="a"]+small.form-text.text-muted)*2
* loginform.jsx
  * for change to htmlFor
  * class change to className

```js
import React, { Component } from "react";
class LoginForm extends React.Component {
  render() {
    return (
      <form>
        <div className="form-group">
          <label htmlFor="username">username</label>
          <input type="text" className="form-control" id="username" />
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input type="password" className="form-control" id="password" />
        </div>
        <button type="submit" className="btn btn-primary">
          Login
        </button>
      </form>
    );
  }
}

export default LoginForm;
```

### 3 - Handling Form submission

* loginform.jsx

```js
...
  handleSubmit = (e) => {
    e.preventDefault();// prevent default behavior - i.e. submitting the form
    console.log("handleSubmit");
  };
  ...
      <form onSubmit={this.handleSubmit}>
 ...
        <button className="btn btn-primary">Login</button>
      </form>
```

### 4 - Refs

* in replace of document.getElementById
* use sparingly

```js
username = React.createRef();
...
console.log(this.username.current.value);
```

### 5 - Controlled Elements

* keep the input value in sync with state
  * create state
  * create method to sync form and state
  * call onchange and set value using state

```jsx
...
  state = {
    account: { username: "", password: "" },
  };
...
  handleChange = (e) => {
    const account = { ...this.state.account };
    account.username = e.currentTarget.value;
    this.setState({ account });
  };
...
           <input
...
              onChange={this.handleChange}
              value={this.state.account.username}
            />
            ...
```

### 6 - handling multiple input

* loginform.jsx

```jsx
...
  handleChange = (e) => {
    ... 
    account[e.currentTarget.name] = e.currentTarget.value;
    ...
  };
  ...
            <input
              ...
              name="username"
              onChange={this.handleChange}
              value={this.state.account.username}
            />
...
              name="password"
              value={this.state.account.password}
              onChange={this.handleChange}
```

### 7 - Common Errors

* controlled element state properties value cannot be null or undefined

### 8 - Extracting a resuable input

* create input.jsx

```jsx
import React from "react";
class Input extends React.Component {
  render() {
    const { name, type, label, value, handleChange } = this.props;

    return (
      <div className="form-group">
        <label htmlFor={name}>{label}</label>
        <input
          autoFocus
          type={type}
          className="form-control"
          id={name}
          name={name}
          onChange={handleChange}
          value={value}
        />
      </div>
    );
  }
}

export default Input;
```

* loginform.jsx
  * import and use input.jsx

```jsx
import Input from "./common/input";
...
          <Input
            name="username"
            type="text"
            handleChange={this.handleChange}
            value={this.state.account.username}
            label="Username"
          />
          <Input
            name="password"
            type="password"
            handleChange={this.handleChange}
            value={this.state.account.password}
            label="Password"
          />
```

### 9,10 - Validation/Basic validation implementation

* loginform.jsx
  * inject errors in errors object and return

```jsx
...
  validate() {
    let errors = {};
    if (this.state.account.username.trim() === "")
      errors.username = "username is required";
    if (this.state.account.password.trim() === "")
      errors.password = "password is required";

    return Object.keys(errors).length === 0 ? null : errors;
  }
  handleSubmit = (e) => {
    e.preventDefault();

    const errors = this.validate();
    console.log(errors);
    this.setState({ errors });
    if (errors) return;

    console.log("submitted");
  };
  ...
```

### 11 - Display validation errors

* loginform.jsx
  * add error object for each field into state.errors during validation
  * passed error object to input

```jsx
  ...
  handleSubmit = (e) => {
...
    this.setState({ errors: errors || {} }); // errors must always be not null
    ...
  };
  ...
          <Input
            name="username"
            ...
            error={this.state.errors["username"]}
          />
          <Input
            name="password"
            ...
            error={this.state.errors["password"]}
          />
```

* input.jsx
  
```jsx
...
{error && <div className="alert alert-danger">{error}</div>} // show when "error" is not null
...
```

### 12 - validation on change

* input.jsx
  * validation upon change
  * set error to state and update view
* loginform.jsx

```jsx
...
  validateInput = (currentTarget) => {
    if (currentTarget.value.trim() === "")
      return currentTarget.name + " cannot be empty";
    return null;
  };
  handleChange = (e) => {
    let errorMessage = this.validateInput(e.currentTarget);
    let errors = {};
    errors[e.currentTarget.name] = errorMessage;
    const account = { ...this.state.account };
    account[e.currentTarget.name] = e.currentTarget.value;
    this.setState({ account, errors });
  };
  ...
```

### 13/14 - Joi/Validating a form using joi

* install joi
  * npm i joi-browser@13.4
* loginform.jsx
  * import Joi
  * define schema
  * validate using joi
  * construct errors and refresh ui

```jsx
...
import Joi from "joi-browser";
...
  schema = {
    username: Joi.string().required().label("User Name"),
    password: Joi.string().min(8).required().label("Password"),
  };
...
  validate() {
    let results = Joi.validate(this.state.account, this.schema, {
      abortEarly: false,
    });
    if (!results.error) return null;

    let errors = {};
    for (let item of results.error.details) errors[item.path[0]] = item.message;

    return errors;
  }
  ...
```

### 15 - Validatng a Property

* loginform.jsx
  * validate only the speicfic field using specific schema

```jsx
...
  validateInput = (currentTarget) => {
    let name = currentTarget.name;
    let value = currentTarget.value;
    let property = { [name]: value };
    let schema = { [name]: this.schema[name] };
    let results = Joi.validate(property, schema);
    if (results.error) return results.error.details[0].message;
    return null;
  };
...
```

### 16 - Disabling the submit button

* loginform.jsx
  * call validate to check disabled or not
    * null is considered falsy
    * not-null is considered truthy

```jsx
...
<button disabled={this.validate()} className="btn btn-primary">
...
```

### 17/18 - Code Review/Extracting A Resuable Form

* common/form.jsx
  * extract resuable componebt from loginform.jsx and put here

```jsx
import React from "react";
import Joi from "joi-browser";
class Form extends React.Component {
  state = {
    data: {},
    errors: {},
  };

  validate() {
    let results = Joi.validate(this.state.data, this.schema, {
      abortEarly: false,
    });
    if (!results.error) return null;

    let errors = {};
    for (let item of results.error.details) errors[item.path[0]] = item.message;

    return errors;
  }

  validateInput = (currentTarget) => {
    let name = currentTarget.name;
    let value = currentTarget.value;
    let property = { [name]: value };
    let schema = { [name]: this.schema[name] };
    let results = Joi.validate(property, schema);
    if (results.error) return results.error.details[0].message;
    return null;
  };

  handleSubmit = (e) => {
    e.preventDefault();

    const errors = this.validate();
    this.setState({ errors: errors || {} });
    if (errors) return;

    this.doSubmit();
  };

  handleChange = (e) => {
    let errorMessage = this.validateInput(e.currentTarget);
    let errors = {};
    errors[e.currentTarget.name] = errorMessage;
    const data = { ...this.state.data };
    data[e.currentTarget.name] = e.currentTarget.value;
    this.setState({ data, errors });
  };
}

export default Form;
```

* loginform.jsx
  * import form.jsx and extend it

```jsx
import React from "react";
import Input from "./common/input";
import Joi from "joi-browser";
import Form from "./common/form";
class LoginForm extends Form {
  state = {
    data: { username: "", password: "" },
    errors: {},
  };

  schema = {
    username: Joi.string().required().label("User Name"),
    password: Joi.string().min(8).required().label("Password"),
  };

  doSubmit = () => {
    console.log("submitted");
  };

  render() {
    return (
      <div>
        <h1>Login</h1>
        <form onSubmit={this.handleSubmit}>
          <Input
            name="username"
            type="text"
            handleChange={this.handleChange}
            value={this.state.data.username}
            label="Username"
            error={this.state.errors["username"]}
          />
          <Input
            name="password"
            type="password"
            handleChange={this.handleChange}
            value={this.state.data.password}
            label="Password"
            error={this.state.errors["password"]}
          />

          <button disabled={this.validate()} className="btn btn-primary">
            Login
          </button>
        </form>
      </div>
    );
  }
}

export default LoginForm;
```

### 19 - extracting helper rendering methods

* form.jsx

```jsx
...
  renderButton(label) {
    return (
      <button disabled={this.validate()} className="btn btn-primary">
        {label}
      </button>
    );
  }

  renderInput(name, label, type, value) {
    return (
      <Input
        label={label}
        name={name}
        type={type}
        value={value}
        handleChange={this.handleChange}
        error={this.state.errors[name]}
      />
    );
  }
  ...
```

* loginform.jsx

```jsx
...
          {this.renderInput(
            "username",
            "Username",
            "text",
            this.state.data.username
          )}
          {this.renderInput(
            "password",
            "Password",
            "password",
            this.state.data.password
          )}

          {this.renderButton("Login")}
          ...
```

### 20, 21 - register form/Code Review

* create register form with (/register)
  * username
    * email
    * required
    * not null
  * password
    * password type
    * min 5
    * required
  * name
    * required
  * register
    * button
    * disable if got valudation errors

```jsx
import React from "react";
import Form from "./common/form";
import Joi from "joi-browser";
class RegisterForm extends Form {
  state = {
    data: { username: "", password: "", name: "" },
    errors: {},
  };

  schema = {
    username: Joi.string().email().required().label("User Name"),
    password: Joi.string().min(5).required().label("Password"),
    name: Joi.string().min(8).required().label("Name"),
  };

  doSubmit = () => {
    console.log("submitted");
  };

  render = () => {
    return (
      <div>
        <h1>Register</h1>
        <form onSubmit={this.handleSubmit}>
          {this.renderInput(
            "username",
            "Username",
            "text",
            this.state.data.username,
            "true"
          )}
          {this.renderInput(
            "password",
            "Password",
            "password",
            this.state.data.password,
            "false"
          )}
          {this.renderInput(
            "name",
            "Name",
            "text",
            this.state.data.name,
            "false"
          )}
          {this.renderButton("Login")}
        </form>
      </div>
    );
  };
}

export default RegisterForm;
```

* App.js

```js
...
import RegisterForm from "./components/registerform";
...
{ link: "/register", label: "Register" },
...
<Route path="/register" component={RegisterForm} />
...
```

### 22, 23 - Exercuse 2 - Movie Form/Code Review

* movies.jsx
  * movie (button)
    * movieform.jsx
      * title - done
        * string - done
      * genre
        * dropdown - done
          * onClick - done
      * stock
        * number - done
        * 0 - 10 - done
      * rate
        * number - done
        * 1 - 10 - done
      * add (button)
        * add to list
        * return the movies page
  * invalid movie link
    * 404
  * delete (button)
    * refresh the list
* App.js

```js
...
import MovieForm from "./components/movieform";
...
<Route path="/movieform/new" component={MovieForm} />
...
```

* movies.jsx

```jsx
...
  addMovie = () => {
    this.props.history.push("/movieform/new");
  };
  ...
          <button className="btn btn-primary" onClick={this.addMovie}>
            new movie
          </button>
          ...
```

* movieform.jsx

```jsx
...
import { getGenres } from "../services/fakeGenreService";
import { getMovies, saveMovie } from "../services/fakeMovieService";
...
  state = {
    data: {
      _id: "",
      title: "",
      genreId: {},
      numberInStock: "",
      dailyRentalRate: "",
    },
    errors: {},
    genres: [],
  };
  schema = {
    _id: Joi.string(),
    title: Joi.string().min(1).required().label("Title"),
    genreId: Joi.string().required().label("Genre"),
    numberInStock: Joi.number().min(1).max(100).required().label("Stock"),
    dailyRentalRate: Joi.number().min(1).max(10).required().label("Rate"),
  };
  ...
  componentDidMount() {
    let genres = [...getGenres()];
    let data = {
      _id: Date.now().toString(),
      title: "",
      genreId: {},
      numberInStock: "",
      dailyRentalRate: "",
    };
    if (this.props.match.params.movieid) {
      let movies = getMovies();
      data = this.mapToViewModel(
        movies.filter((m) => m._id === this.props.match.params.movieid)[0]
      );
    }
    this.setState({ data, genres });
  }
  doSubmit = (movie) => {
    saveMovie(movie);
    this.props.history.replace("/movies");
  };
  ...
            {this.renderDropdown(
            "genreId",
            "Genre",
            this.state.genres,
            this.state.data.genreId
          )}
          ...

```

* form.jsx

```jsx
...
import Dropdown from "./dropdown";
...
  renderDropdown(name, label, options, value) {
    const { errors } = this.state;
    return (
      <Dropdown
        options={options}
        value={value}
        name={name}
        label={label}
        handleChange={this.handleChange}
        error={errors[name]}
      />
    );
  }
...
```

* dropdown.jsx

```jsx
import React from "react";
class Dropdown extends React.Component {
  handleChange = (e) => {
    this.props.handleChange(e);
  };
  render = () => {
    const { name, label, options, error, value } = this.props;
    return (
      <div className="form-group">
        <label htmlFor={name}>{label}</label>
        <select
          name={name}
          id={name}
          className="form-control"
          onChange={this.handleChange}
          value={value}
        >
          <option value=""></option>
          {options.map((option) => (
            <option key={option._id} value={option._id}>
              {option.name}
            </option>
          ))}
        </select>
        {error && <div className="alert alert-danger">{error}</div>}
      </div>
    );
  };
}

export default Dropdown;
```

### 24/25 - Exercise 3 - Search Movies/Code Review

* search box
  * type and refresh
* case insensitive
* ignore filter
  * either filter or search
* searchbox.jsx

```jsx
import React from "react";
class SearchBox extends React.Component {
  handleSearch = (e) => {
    this.props.handleSearch(e.currentTarget.value);
  };
  render() {
    const { value } = this.props;
    return (
      <div class="form-group">
        <input
          type="text"
          class="form-control"
          id="search"
          aria-describedby="search"
          placeholder="search"
          value={value}
          onChange={this.handleSearch}
        />
      </div>
    );
  }
}

export default SearchBox;
```

* movies.jsx

```jsx
...
import SearchBox from "./common/searchbox";
...
  handleFilterGenre = (selectedGenre) => {
    let movies = getMovies();
    this.setState({ selectedGenre, currentPage: 1, movies, search: "" });
  };
...
  handleSearch = (value) => {
    let movies = getMovies().filter(
      (m) => m.title.toLowerCase().indexOf(value.toLowerCase()) > -1
    );

    this.setState({
      selectedGenre: { _id: "all", name: "All Genres" },
      currentPage: 1,
      movies: movies,
      search: value,
    });
  };
...
          <SearchBox
            handleSearch={this.handleSearch}
            value={this.state.search}
          />
          ...
```

## Calling backend Services

### 1/2 - Introducetion/JSON Placeholder

* download Section 8- Calling Backend Services.zip
* cd http-app
* npm i
* npm start
* fake api
  * <https://jsonplaceholder.typicode.com/>

### 3 - HttpClients

* modern browser supports
  * fetch api
  * jquery ajax
  * axios (this project)
* install axios
  * npm i axios@0.18
* Promise
  * object that is returned by api (since is async, api will "promise" to return a object once ready)

### 4 - getting data

* most api is async(doesnt' get results on the spot)
  * decorate method with "async"
* App.jsx

```jsx
...
async componentDidMount() {}
...
    const { data: posts } = await http.get(config.apiEndpoint);
    this.setState({ posts });
    ...
```

### 5 - Creating Data

```jsx
...
  handleAdd = async () => {
    const obj = { title: "a", body: "b" };
    const { data: post } = await http.post(config.apiEndpoint, obj);

    const posts = [post, ...this.state.posts];
    this.setState({ posts });
  };
  ...
```

### 6 - Lifecycle of a request

* method will be change to "OPTION" when "get" source and target is different (browsesr behavior)

### 7 - Updating Data

```jsx
...
  handleUpdate = async (post) => {
    post.title = "UPDATED";
    await http.put(config.apiEndpoint + "/" + post.id, post);

    const posts = [...this.state.posts];
    const index = posts.indexOf(post);
    posts[index] = { ...post };
    this.setState({ posts });
  };
  ...
```

### 8 - Delete Data

```jsx
...
  handleDelete = async (post) => {
    const originalPosts = this.state.posts;

    const posts = this.state.posts.filter((p) => p.id !== post.id);
    this.setState({ posts });
  };
...
```

### 9 - Optimistic vs Perssimistic updates

* Pessimistic
  * call api followed by update
    * there will be latency when calling api, that's why UI looks hanging (0.5s) before the object is added/removed/updated

```jsx
...
  handleDelete = async (post) => {
    await http.delete(config.apiEndpoint + "/" + post.id);
    // wait for 0.5s
    const posts = this.state.posts.filter((p) => p.id !== post.id);
    this.setState({ posts });

  };
  ...
```

* Optimistic
  * update UI first then call api. Revert UI if got error.

```jsx
...
  handleDelete = async (post) => {
    const originalPosts = this.state.posts;

    const posts = this.state.posts.filter((p) => p.id !== post.id);
    this.setState({ posts });

    try {
      await http.delete(config.apiEndpoint + "/" + post.id);
    } catch (ex) {
      if (ex.response && ex.response.status === 404)
        alert("This post has already been deleted.");
      this.setState({ posts: originalPosts });
    }
  };
...
```

### 10 - Expected vs Unexpected Errors

* Expeceed
  * 400 - 500
    * E.g.
      * 404 - not found
      * 400 - bad request
  * client error
  * display specic error message
* unexpected
  * E.g.
    * daatbase down
    * network down
  * log them
  * display a generic and freindly error message

```jsx
...
  handleDelete = async (post) => {
    ...
    try {
      await http.delete(config.apiEndpoint + "/" + post.id);
    } catch (ex) {
      if (ex.response && ex.response.status === 404)
        alert("This post has already been deleted.");
      this.setState({ posts: originalPosts });
    }
  };
...
```

### 11 - Unhandling Unexpected Errors Globally

* use axios intercepters
  * intercept request before going out
  * intercept success response or failure response(expected and unexpected) before returning to client (i.e. catch(e))
    * E.g.
      * axios.interceptors.response.use(success function, error => {... error.response.status ... return Promise.reject(error)...} )

```jsx
...
axios.interceptors.response.use(null, error => {
  const expectedError =
    error.response &&
    error.response.status >= 400 &&
    error.response.status < 500;

  if (!expectedError) {
    logger.log(error);
    toast.error("An unexpected error occurrred.");
  }

  return Promise.reject(error);
});
...
```

### 12 - Extracting a Reusable Http Service

* create a reusnable service
  * copy intercept code
* create src/services/httpService.js

```js
import axios from "axios";
import logger from "./logService";
import { toast } from "react-toastify";

axios.interceptors.response.use(null, error => {
  const expectedError =
    error.response &&
    error.response.status >= 400 &&
    error.response.status < 500;

  if (!expectedError) {
    logger.log(error);
    toast.error("An unexpected error occurrred.");
  }

  return Promise.reject(error);
});

export default {
  get: axios.get,
  post: axios.post,
  put: axios.put,
  delete: axios.delete
};
```

* app.js
  * import and use (change all occurances of "axio." to "http.")

```js
...
import http from "./services/httpService";
...
const { data: posts } = await http.get(config.apiEndpoint);
...
```

### 13 - Extracting a config module

* put all config into another file
* src/config.json
  * move all config to config.json as object

```json
{
  "apiEndpoint": "https://jsonplaceholder.typicode.com/posts"
}
```

* app.js
  * improt and use

```js
...
import config from "./config.json";
...
const { data: posts } = await http.get(config.apiEndpoint);
...
```

### 14 - Displaying Toast Notifications

* in replace of ugly alert
* install
  * npm i react-toastify@4.1
* App.js
  * import component, css and use

```js
...
import { ToastContainer } from "react-toastify";
...
import "react-toastify/dist/ReactToastify.css";
...

  render() {
    return (
...
        <ToastContainer />
        ...
```

* httpService.js
  * import and use
    * replace alert with toast or toast.error

```js
...
import { toast } from "react-toastify";
...
toast.error("An unexpected error occurrred.");
...
```

### 15 - Logging Errors

* "console.log" is browser, developer won't know. Hence have to log to server
  * E.g. sentry.io
    * signup using <http://programmingwithmosh.com/tools>
    * create an new app under react
    * copy the code from setup guide and modify index.js
* install
  * ~~npm i raven-js@3.26.4~~
  * npm install --save @sentry/react @sentry/tracing
* index.js

```js
...
import * as Sentry from "@sentry/react";
import { Integrations } from "@sentry/tracing";
...
Sentry.init({
  dsn: "https://3c19e07221c1496fb666f4c16ea5b692@o1072694.ingest.sentry.io/6071973",
  integrations: [new Integrations.BrowserTracing()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});
...
```